<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Wasim Lorgat</title>
<link>https://wasimlorgat.com/tils/index.html</link>
<atom:link href="https://wasimlorgat.com/tils/index.xml" rel="self" type="application/rss+xml"/>
<description>Recent TILs on wasimlorgat.com</description>
<generator>quarto-1.4.104</generator>
<lastBuildDate>Mon, 22 May 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Using shot-scraper to automate screenshots for my writing</title>
  <link>https://wasimlorgat.com/tils/using-shot-scraper.html</link>
  <description><![CDATA[ 



<p>I’m trying out <a href="https://simonwillison.net/">Simon Willison’s</a> <a href="https://github.com/simonw/shot-scraper">shot-scraper</a> to include a screenshot of the <a href="https://fastai.github.io/jupytercon-2023/">website</a> for our JupyterCon 2023 tutorial in my <a href="../posts/jupytercon-2023.html">blog post</a>.</p>
<p>First install the <code>shot-scraper</code> command line tool:</p>
<div id="cell-3" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip3 install shot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>scraper</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Collecting shot-scraper
  Downloading shot_scraper-1.2-py3-none-any.whl (15 kB)
Collecting click
  Downloading click-8.1.3-py3-none-any.whl (96 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 96.6/96.6 kB 3.7 MB/s eta 0:00:00
Requirement already satisfied: PyYAML in /opt/homebrew/lib/python3.11/site-packages (from shot-scraper) (6.0)
Collecting playwright
  Downloading playwright-1.33.0-py3-none-macosx_11_0_arm64.whl (31.2 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 31.2/31.2 MB 5.5 MB/s eta 0:00:0000:0100:01
Collecting click-default-group
  Downloading click-default-group-1.2.2.tar.gz (3.3 kB)
  Preparing metadata (setup.py) ... done
Collecting greenlet==2.0.1
  Downloading greenlet-2.0.1-cp311-cp311-macosx_10_9_universal2.whl (259 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 259.4/259.4 kB 5.3 MB/s eta 0:00:00a 0:00:01
Collecting pyee==9.0.4
  Downloading pyee-9.0.4-py2.py3-none-any.whl (14 kB)
Requirement already satisfied: typing-extensions in /opt/homebrew/lib/python3.11/site-packages (from pyee==9.0.4-&gt;playwright-&gt;shot-scraper) (4.5.0)
Building wheels for collected packages: click-default-group
  Building wheel for click-default-group (setup.py) ... done
  Created wheel for click-default-group: filename=click_default_group-1.2.2-py3-none-any.whl size=3383 sha256=816707e9974b43b6f04f2e646cf851f2e041f0c7cc25fcb67612fb4d72973d4f
  Stored in directory: /Users/seem/Library/Caches/pip/wheels/69/9a/ed/1979767796ee1379d161a35fea9745a788476be12fb2ac664a
Successfully built click-default-group
Installing collected packages: pyee, greenlet, click, playwright, click-default-group, shot-scraper
Successfully installed click-8.1.3 click-default-group-1.2.2 greenlet-2.0.1 playwright-1.33.0 pyee-9.0.4 shot-scraper-1.2

[notice] A new release of pip is available: 23.0.1 -&gt; 23.1.2
[notice] To update, run: python3.11 -m pip install --upgrade pip</code></pre>
</div>
</div>
<p>Then install the underlying browser used by <code>shot-scraper</code>:</p>
<div id="cell-5" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>shot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>scraper install</span></code></pre></div>
</div>
<p>We can now take a screenshot of any website!</p>
<div id="cell-7" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>shot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>scraper https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>fastai.github.io<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>jupytercon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>output ..<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>posts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>jupytercon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tutorial.png <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>width <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1600</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>height <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span></span></code></pre></div>
</div>
<p>Here’s the image:</p>
<div id="cell-9" class="cell" data-execution_count="36">
<div class="cell-output cell-output-display" data-execution_count="36">
<p><img src="https://wasimlorgat.com/tils/using-shot-scraper_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>I want a resolution of 1600x900 but the font size is too small here. Halving the width and height and doubling the device scale factor with the <code>--retina</code> flag should fix this:</p>
<div id="cell-11" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>shot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>scraper https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>fastai.github.io<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>jupytercon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>output ..<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>posts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>jupytercon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tutorial.png <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>width <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>height <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>retina</span></code></pre></div>
</div>
<div id="cell-12" class="cell" data-execution_count="38">
<div class="cell-output cell-output-display" data-execution_count="38">
<p><img src="https://wasimlorgat.com/tils/using-shot-scraper_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Finally, I want to exclude the nav bar. We can use a CSS selector for that:</p>
<div id="cell-14" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>shot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>scraper https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>fastai.github.io<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>jupytercon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>output ..<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>posts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>jupytercon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tutorial.png <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>selector <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#quarto-content'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>width <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>height <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>retina</span></code></pre></div>
</div>
<div id="cell-15" class="cell" data-execution_count="40">
<div class="cell-output cell-output-display" data-execution_count="40">
<p><img src="https://wasimlorgat.com/tils/using-shot-scraper_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Ah, it doesn’t seem like <code>--selector</code> works together with <code>--width</code> and <code>--height</code>. Another way to do this might be by hiding the navbar by executing <code>--javascript</code> code:</p>
<div id="cell-17" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>shot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>scraper https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>fastai.github.io<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>jupytercon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>output ..<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>posts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>jupytercon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tutorial.png <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>width <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>height <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>retina <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>javascript <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"document.querySelector('#quarto-header').style.display = 'none'"</span></span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-execution_count="45">
<div class="cell-output cell-output-display" data-execution_count="45">
<p><img src="https://wasimlorgat.com/tils/using-shot-scraper_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Perfect! I’m chuffed with how easy this was. I typed this out exactly as I used it, and everything worked first time with zero errors. I think it would’ve been neat if I could use <code>--width</code> and <code>--height</code> to crop the image after a <code>--selector</code> is applied, but in the end I could get what I wanted using a single line of <code>--javascript</code>.</p>



 ]]></description>
  <guid>https://wasimlorgat.com/tils/using-shot-scraper.html</guid>
  <pubDate>Mon, 22 May 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to create your own AI avatar using HuggingFace Diffusers and Dreambooth</title>
  <link>https://wasimlorgat.com/tils/how-to-create-an-ai-profile-picture-from-scratch.html</link>
  <description><![CDATA[ 



<p>I’m super impressed with the quality of Dreambooth using <a href="https://huggingface.co/docs/diffusers/training/dreambooth">HuggingFace Diffusers</a> 🚀 — with only 14 images of myself! These four images are created by Stable Diffusion using the same fine-tuned model with different prompts:<sup>1</sup></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/tils/images/dreambooth.png" class="img-fluid figure-img" width="600"></p>
<figcaption class="figure-caption">Four AI-generated pictures of me.</figcaption>
</figure>
</div>
<p>Here are a few details that made the difference for me:</p>
<ol type="1">
<li><p><strong>High-quality data:</strong> As always, the most crucial element is data. I got away with very few images, but quality is important. I used:</p>
<ul>
<li>14 images</li>
<li>Captured around the same time, therefore same facial structure, hairstyle, etc</li>
<li>Cropped to head &amp; shoulders</li>
<li>I was the only subject</li>
</ul></li>
<li><p><strong>Avoid overfitting:</strong> Second most important is to avoid overfitting. I used:</p>
<ul>
<li>Prior preservation loss with 90 high quality portraits scraped from Pexel via the <a href="https://huggingface.co/datasets/yuvalkirstain/portrait_dreambooth"><code>yuvalkirstain/portrait_dreambooth</code></a> HuggingFace dataset</li>
<li>Low learning rate (1e-6)</li>
<li>Low training step count (300) – adjust this based on how many images you have</li>
</ul></li>
<li><p><strong>Train the text encoder:</strong> In addition to the U-Net. I needed to use a few of the supported memory optimization features to run this on a 16GB GPU:</p>
<ul>
<li><a href="https://github.com/facebookresearch/xformers">Xformers’</a> efficient attention – had to build from source, prebuilt didn’t work</li>
<li><a href="https://github.com/huggingface/accelerate">HuggingFace Accelerate’s</a> gradient accumulation</li>
<li><a href="https://github.com/facebookresearch/bitsandbytes">Bitsandbytes’</a> 8bit adam</li>
</ul></li>
<li><p><strong>High-quality prompts:</strong> If you do all of the above perfectly, you still won’t get great results without high quality prompts. I’m not a prompt guru myself, so I took from the excellent prompts curated at <a href="https://publicprompts.art/">PublicPrompts</a> as well as <a href="https://lexica.art">Lexica</a>.</p>
<p>Even with great prompts, it is a struggle to get it to deviate from the training set. I had to tweak the order of words, and try adding and removing certain words to get it to work. For some reason, adding “Hypnotic illustration” to the start of the prompt worked consistently 🤷🏽‍♂️.</p></li>
</ol>
<p>Please don’t hestitate to share any questions or comments in the Twitter thread below or via <a href="mailto:mwlorgat@gmail.com">email</a>:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
I'm super impressed with the quality of Dreambooth with <a href="https://twitter.com/huggingface?ref_src=twsrc%5Etfw"><span class="citation" data-cites="huggingface">@huggingface</span></a> Diffusers 🚀 using only 14 pics of myself!<br><br>All of these are generated, with different prompts for: plain photo, psy art, anime, toy story<br><br>What worked for me:<br><br>1. As always, the most crucial element is data… <a href="https://t.co/ueZd13AuwR">pic.twitter.com/ueZd13AuwR</a>
</p>
— Wasim Lorgat (<span class="citation" data-cites="wasimlorgat">@wasimlorgat</span>) <a href="https://twitter.com/wasimlorgat/status/1632636435722534913?ref_src=twsrc%5Etfw">March 6, 2023</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<aside id="footnotes" class="footnotes footnotes-end-of-document">
<hr>
<ol>
<li id="fn1"><p>Here are the exact prompts I used for each of the above images:</p>
<ul>
<li><strong>Top-left:</strong> a photo of &lt;dreambooth token&gt;</li>
<li><strong>Top-right:</strong> Hypnotic illustration of &lt;dreambooth token&gt;, hypnotic psychedelic art by Dan Mumford, pop surrealism, dark glow neon paint, mystical, Behance (<a href="https://publicprompts.art/psychedelic-pop-art/">PublicPrompts source</a>)</li>
<li><strong>Bottom-left:</strong> Hypnotic illustration of &lt;dreambooth token&gt;, anime illustration by makoto shinkai, stanley artgerm lau, wlop, rossdraws, concept art, digital painting (<a href="https://publicprompts.art/hyper-realistic-anime-portraits/">PublicPrompts source</a>)</li>
<li><strong>Bottom-right:</strong> Toy Story’s Woody as &lt;dreambooth token&gt;, 4k, artstation, cgsociety, award-winning, masterpiece, stunning, beautiful, glorious, powerful, fantasy art by Greg Rutkowski, octane render, unreal engine, high (<a href="https://lexica.art/prompt/6c0dd61e-3d90-49ac-b32f-07f19b1a7d84">Lexica source</a>)</li>
</ul>
↩︎</li>
</ol>
</aside>

 ]]></description>
  <category>artificial intelligence</category>
  <guid>https://wasimlorgat.com/tils/how-to-create-an-ai-profile-picture-from-scratch.html</guid>
  <pubDate>Mon, 06 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://wasimlorgat.com/tils/images/dreambooth.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Callbacks vs async/await</title>
  <link>https://wasimlorgat.com/tils/callbacks-vs-async-await.html</link>
  <description><![CDATA[ 



<div id="148e6fe2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ipywidgets</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> threading <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Thread</span></code></pre></div>
</div>
<p>Let’s start with a very simple interface. An input text, a submit button, and an output text (<code>disabled=True</code> so that it’s not editable):</p>
<div id="3f558b9a" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">input_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipywidgets.Text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hey ChatGPT, please summarise this text."</span>)</span>
<span id="cb2-2">button <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipywidgets.Button(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Submit"</span>)</span>
<span id="cb2-3">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipywidgets.Text(disabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-4">display(input_, button, output)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4bf5b79bfb63429abe02bb65dbbe9777","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f9e78dedd4ce44dc8c63bfa57ef0ca5f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ff55d098626e469eab8f3a44b0960030","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>This won’t do anything yet. We need to setup an <code>on_click</code> callback first. We’ll fake a request to OpenAI that simply sleeps for half a second then returns a fixed string. Then we’ll update the output text’s value with the result:</p>
<div id="329b0fd4" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> request_open_ai(prompt):</span>
<span id="cb3-2">    time.sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Here's a summary of your text."</span></span></code></pre></div>
</div>
<div id="9ed19ad9" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_output(text):</span>
<span id="cb4-2">    output.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text</span></code></pre></div>
</div>
<div id="3852d547" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> on_click(button):</span>
<span id="cb5-2">    text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request_open_ai(input_.value)</span>
<span id="cb5-3">    update_output(text)</span></code></pre></div>
</div>
<div id="15ea8d9e" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">button.on_click(on_click)</span></code></pre></div>
</div>
<p>If you click “Submit” now, it should populate the output after half a second.</p>
<p>If we do this synchronously and in the main thread, the entire UI will hang during the <code>requestOpenAi</code> call. So instead, we can separate that call into another thread. I think ipywidgets already does a version of this for us. But if it didn’t, here’s a very rough version of how we’d do it:</p>
<div id="dbbc77ee" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>request_open_ai, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>,)).run()</span></code></pre></div>
</div>
<p>But then how do we get the result and update the output with it? It’s often trickier to pass data across threads. Instead, we define our request function so that it accepts a callback that gets called with the result:</p>
<div id="70ee4c97" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> request_open_ai(prompt, on_completion):</span>
<span id="cb8-2">    time.sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb8-3">    on_completion(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Here's a summary of your text."</span>)</span></code></pre></div>
</div>
<div id="367d7e89" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> on_click(button):</span>
<span id="cb9-2">    Thread(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>request_open_ai, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, update_output)).run()</span></code></pre></div>
</div>
<div id="b65410e9" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">input_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipywidgets.Text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hey ChatGPT, please summarise this text."</span>)</span>
<span id="cb10-2">button <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipywidgets.Button(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Submit"</span>)</span>
<span id="cb10-3">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipywidgets.Text(disabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-4">button.on_click(on_click)</span>
<span id="cb10-5">display(input_, button, output)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0dddaf1ad66c40d5942a999cff5760c9","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"94173406b49540fe89fec9493db08140","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d95e9bdafdfc4a16839a63992732b04d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>This works okay, but starts to get very confusing as you add more and more nested callbacks. In fact, it can get so bad that it’s been nicknamed callback hell. Someone was so frustrated with it that they even created a <a href="http://callbackhell.com/">website</a>! This is where async/await becomes useful, since it looks a lot more like ordinary programming:</p>
<div id="5106c857" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span></code></pre></div>
</div>
<div id="0aa9c776" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> request_open_ai(prompt):</span>
<span id="cb12-2">    time.sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb12-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Here's a summary of your text."</span></span></code></pre></div>
</div>
<div id="9f52a088" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> on_click(button):</span>
<span id="cb13-2">    text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> request_open_ai(input_.value)</span>
<span id="cb13-3">    update_output(text)</span></code></pre></div>
</div>
<p>Note how these functions look a lot similar to the original synchronous ones instead of having the weird callbacks.</p>
<p>In most UI frameworks, we’d be able to pass in an async function like the new <code>on_click</code>. I’m not sure how to do that with ipywidgets, so we need to define a little wrapper that synchronously calls the async function, so we can set it as the button’s <code>on_click</code> handler (confusing, I know):</p>
<div id="0821929b" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> on_click_sync(button):</span>
<span id="cb14-2">    coroutine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> on_click(button)</span>
<span id="cb14-3">    asyncio.ensure_future(coroutine)</span></code></pre></div>
</div>
<div id="fa6d1c51" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">input_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipywidgets.Text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hey ChatGPT, please summarise this text."</span>)</span>
<span id="cb15-2">button <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipywidgets.Button(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Submit"</span>)</span>
<span id="cb15-3">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipywidgets.Text(disabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb15-4">button.on_click(on_click_sync)</span>
<span id="cb15-5">display(input_, button, output)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"19463a60508b44c0be86a16992db82d9","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"862ae7f2344840ffa0da95efbe739d54","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3050c63e89844065b950446438bc73e6","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>



 ]]></description>
  <guid>https://wasimlorgat.com/tils/callbacks-vs-async-await.html</guid>
  <pubDate>Mon, 13 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to use NSTableView in SwiftUI</title>
  <link>https://wasimlorgat.com/tils/how-to-use-nstableview-in-swiftui.html</link>
  <description><![CDATA[ 



<p>I recently started learning macOS development using SwiftUI as part of my latest project: <a href="https://twitter.com/wasimlorgat/status/1611615676220817415">building a macOS Jupyter frontend</a>. While I’m loving Swift (the language) and SwiftUI (the UI framework), it’s sometimes extremely difficult to find out information that feels like it should be readily available.</p>
<p>The latest such case is how to use an <code>NSTableView</code> in SwiftUI. SwiftUI’s new <code>List</code> is great for iOS and multiplatform apps, but doesn’t seem to be designed for desktop-specific apps which can do with much more information-dense UIs.</p>
<p>SwiftUI has the newer <code>Table</code> too, but it’s also quite limited at this stage. For example, I don’t think it’s possible to make an entire row clickable.</p>
<p>This left me wanting to try out the much more battle-tested <code>NSTableView</code> – but as an Apple dev noob, I couldn’t get a minimal example up and running after a few hours of tinkering!</p>
<p>… So here’s a snippet you can copy paste.<sup>1</sup> Keep reading below if you’d like to see how it works step-by-step.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode swift code-with-copy"><code class="sourceCode swift"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">import</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">SwiftUI</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> TableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSViewRepresentable</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Coordinator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableViewDelegate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableViewDataSource</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-5">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">data</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apple"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Banana"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cherry"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numberOfRows</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> -&gt; <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-8">            data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>count</span>
<span id="cb1-9">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">_</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">viewFor</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tableColumn</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableColumn</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">row</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> -&gt; <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NSView</span>? <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-12">            NSTextField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>labelWithString<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb1-13">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-15"></span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeCoordinator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> -&gt; <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Coordinator</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-17">        Coordinator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb1-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-19"></span>
<span id="cb1-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeNSView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">context</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Context</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> -&gt; <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NSTableView</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-21">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tableView</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NSTableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb1-22">        tableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>delegate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>coordinator</span>
<span id="cb1-23">        tableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dataSource <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>coordinator</span>
<span id="cb1-24">        tableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>addTableColumn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>NSTableColumn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb1-25">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tableView</span>
<span id="cb1-26">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-27"></span>
<span id="cb1-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateNSView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">_</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nsView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">context</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Context</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Do nothing</span></span>
<span id="cb1-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p><strong>Step-by-step:</strong></p>
<p>Create your table view struct, conforming to <code>NSViewRepresentable</code>. This is a standard way of using AppKit/UIKit views in your SwiftUI applications.</p>
<p>In <code>makeNSView</code>, create the <code>NSTableView</code> with a single column, and leave <code>updateNSView</code> blank for now:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode swift code-with-copy"><code class="sourceCode swift"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> TableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSViewRepresentable</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeNSView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">context</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Context</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> -&gt; <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NSTableView</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tableView</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NSTableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb2-4">        tableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>addColumn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>NSTableColumn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb2-5">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tableView</span>
<span id="cb2-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateNSView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">_</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nsView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">context</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Context</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Do nothing</span></span>
<span id="cb2-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Create a <code>Coordinator</code>, subclassing:</p>
<ul>
<li><code>NSTableViewDelegate</code> which we’ll use to customize how cells are rendered as views, and</li>
<li><code>NSTableViewDataSource</code> to define the number of rows.</li>
</ul>
<p>Implement <code>makeCoordinator</code>, returning an instance of <code>Coordinator</code>, then link it to the table view in <code>makeNSView</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode swift code-with-copy"><code class="sourceCode swift"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> TableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSViewRepresentable</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Coordinator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableViewDelegate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableViewDataSource</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeCoordinator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> -&gt; <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Coordinator</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-6">        Coordinator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb3-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-8"></span>
<span id="cb3-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeNSView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">context</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Context</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> -&gt; <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NSTableView</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tableView</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NSTableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb3-11">        tableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>delegate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>coordinator</span>
<span id="cb3-12">        tableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dataSource <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>coordinator</span>
<span id="cb3-13">        tableView<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>addColumn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>NSTableColumn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb3-14">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tableView</span>
<span id="cb3-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-16"></span>
<span id="cb3-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateNSView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">_</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nsView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">context</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Context</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Do nothing</span></span>
<span id="cb3-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>You still won’t see anything being rendered yet, since we still need to implement <code>NSTableViewDelegate</code> and <code>NSTableViewDataSource</code> methods.</p>
<p>For this minimal example, we’ll use a simple static array of strings defined right in the coordinator, although in practice you would probably get data from the view.</p>
<p>Implement <code>NSTableViewDataSource</code>’s <code>numberOfRows</code> and <code>NSTableViewDelegate</code>’s <code>tableView(tableView:viewFor:row)</code>. The former returns the length of our array. The latter returns an <code>NSTextField</code> created from the corresponding row of data.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode swift code-with-copy"><code class="sourceCode swift"><span id="cb4-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Coordinator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSObject</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableViewDelegate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableViewDataSource</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-2">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">data</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apple"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Banana"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cherry"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numberOfRows</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> -&gt; <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-5">            data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>count</span>
<span id="cb4-6">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">_</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableView</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">viewFor</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tableColumn</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NSTableColumn</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">row</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> -&gt; <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NSView</span>? <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-9">            NSTextField<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>labelWithString<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb4-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>That’s it! This is the minimal implementation of an <code>NSTableView</code> in SwiftUI that I could find. Let me know on <a href="https://twitter.com/wasimlorgat">Twitter</a>, via <a href="mailto:mwlorgat@gmail.com">email</a>, or via the GitHub discussion below if you have any comments or suggestions.</p>
<p>Here are some next steps I have in mind:</p>
<ul>
<li>Get preview working (<a href="https://www.swiftjectivec.com/using-xcode-previews-for-uikit/">this</a> looks helpful)</li>
<li>Custom cell view
<ul>
<li>Vertically align text</li>
</ul></li>
<li>Multiple columns
<ul>
<li>Index column</li>
<li>Image column</li>
<li>Date column</li>
</ul></li>
<li>Column headers</li>
<li>Make it interactive
<ul>
<li>Do something on select</li>
<li>Do something on hover</li>
<li>Do something on click</li>
</ul></li>
<li>Load data dynamically</li>
</ul>
<p>Let me know if you’d find these helpful!</p>
<!--
```swift
import SwiftUI

struct TableView: NSViewRepresentable { # <1>
    class Coordinator: NSObject, NSTableViewDelegate, NSTableViewDataSource { # <2>
        let data = ["Apple", "Banana", "Cherry"] # <3>

        func numberOfRows(in tableView: NSTableView) -> Int { # <4>
            return data.count # <4>
        } # <4>

        func tableView(_ tableView: NSTableView, viewFor tableColumn: NSTableColumn?, row: Int) -> NSView? { # <5>
            let rowData = data[row] # <5>
            let id = NSUserInterfaceItemIdentifier(rawValue: "cell") # <5>
            let text = NSTextField(labelWithString: rowData) # <5>
            let view = NSTableCellView() # <5>
            view.identifier = id # <5>
            view.addSubview(text) # <5>
            return view # <5>
        }
    }

    func makeNSView(context: Context) -> NSTableView { # <6>
        let tableView = NSTableView() # <6>
        tableView.delegate = context.coordinator   # <6>
        tableView.dataSource = context.coordinator # <6>

        let column = NSTableColumn() # <7>
        column.identifier = NSUserInterfaceItemIdentifier("name") # <7>
        tableView.addTableColumn(column) # <7>

        return tableView
    }

    func updateNSView(_ nsView: NSTableView, context: Context) { } # <8>

    func makeCoordinator() -> Coordinator { # <8>
        Coordinator()
    }
}
```

1. Create your table view struct, conforming to `NSViewRepresentable`. This is a typical way of using AppKit/UIKit views in your SwiftUI applications.
2. Create a `Coordinator` subclassing: `NSTableViewDelegate` which we'll use to customize how cells are rendered as views, and `NSTableViewDataSource` to define the number of rows.
3. Define our data as a static array of strings for this simple example.
4. Implement `NSTableViewDataSource.numberOfRows`, passing through to `data`.
5. Implement `NSTableViewDelegate.tableView` with `(..., viewFor: NSTableColumn?, row: Int)` signature, which is used to render a view given a column and row number. This is a minimal `NSTableCellView` containing a single `NSTextField` subview.
6. Implement `makeNSView`, assigning `delegate` and `dataSource` to our `Coordinator`. This ensures that the methods defined above get called when appropriate.
7. Create an `NSTableColumn` and add it to the table view.
8. Implement `updateNSView`, although since we have static data it does nothing.
9. Implement `makeCoordinator` to return our custom `Coordinator` defined above.
-->


<aside id="footnotes" class="footnotes footnotes-end-of-document">
<hr>
<ol>
<li id="fn1"><p>Many thanks to Alex Grebenyuk whose <a href="https://kean.blog/post/not-list">article</a> and <a href="https://github.com/kean/PulsePro">repo</a> I heavily referenced to figure this out.↩︎</p></li>
</ol>
</aside>

 ]]></description>
  <category>swift</category>
  <guid>https://wasimlorgat.com/tils/how-to-use-nstableview-in-swiftui.html</guid>
  <pubDate>Wed, 25 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to setup a GPU notebook server on Google Cloud Platform (GCP)</title>
  <link>https://wasimlorgat.com/tils/how-to-setup-a-gpu-instance-on-google-cloud-platform.html</link>
  <description><![CDATA[ 



<p>GCP is my current preferred cloud provider for GPU servers. I <a href="https://twitter.com/wasimlorgat/status/1524301276179312644?s=20">compared prices last year</a> and found that GCP was the cheapest for lower-end GPUs. The notebook servers offered Vertex AI are very easy to setup. They come with PyTorch and NVIDIA/CUDA drivers already configured. I also prefer options that give me full control over the instance via an SSH connection from my terminal, which this does.</p>
<p>Depending on when you’re reading this, these instructions may no longer be valid. Please <a href="mailto:mwlorgat@gmail.com">let me know</a> if that’s the case!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/tils/images/cloud-gpu-prices.jpeg" class="border shadow-sm img-fluid figure-img"></p>
<figcaption class="figure-caption">Cloud GPU prices as of May 2022 (<a href="https://twitter.com/wasimlorgat/status/1524301276179312644">via</a>).</figcaption>
</figure>
</div>
<section id="setup-a-gcp-account" class="level2">
<h2 class="anchored" data-anchor-id="setup-a-gcp-account">Setup a GCP account</h2>
<ol type="1">
<li>Create a GCP account <a href="https://cloud.google.com/">here</a>.</li>
<li>Request a GPU quota increase (follow <a href="https://cloud.google.com/ai-platform/training/docs/quotas#requesting_a_quota_increase">the official instructions</a>). This may take up to 48 hours.</li>
<li>Enable the AI Platform via the left sidebar.</li>
</ol>
</section>
<section id="create-a-notebook-instance-using-vertex-ai" class="level2">
<h2 class="anchored" data-anchor-id="create-a-notebook-instance-using-vertex-ai">Create a notebook instance using Vertex AI</h2>
<ol type="1">
<li>Open the <a href="https://console.cloud.google.com/vertex-ai/workbench">Vertex AI Workbench</a>.</li>
<li>Click <em>New Notebook</em>, <em>PyTorch 1.12</em>, then <em>With 1 NVIDIA T4</em>.</li>
<li>Set your <em>Notebook name</em>.</li>
<li>Choose a <em>Region</em> and <em>Zone</em>. I went with <code>us-central1</code> and <code>us-central-1b</code> (which was the cheapest available at the time). Note that your choice of region and zone may affect GPU availability and does slightly affect pricing.</li>
<li>By default, you’ll be provided with an <code>n1-standard-4</code> which has 4 vCPUs and 15 GB RAM, and an NVIDIA Tesla T4. If you need more resources, click the edit button next to <em>Notebook properties</em>, then <em>Machine configuration</em>, set your <em>Machine type</em> and <em>GPU type</em>, then click <em>Create</em>.</li>
<li>Check <em>Install NVIDIA GPU driver automatically for me</em>.</li>
<li>Wait a few seconds for the notebook server to spin up. Then click <em>OPEN JUPYTERLAB</em>.</li>
</ol>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Shutdown your server when you’re done working
</div>
</div>
<div class="callout-body-container callout-body">
<p>You’ll be billed for as long as the server is running. You may also be billed a smaller amount for persistent storage even while the server is shutdown.</p>
</div>
</div>


</section>

 ]]></description>
  <category>artificial intelligence</category>
  <guid>https://wasimlorgat.com/tils/how-to-setup-a-gpu-instance-on-google-cloud-platform.html</guid>
  <pubDate>Mon, 23 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to share terminal demos as razor-sharp animated SVG</title>
  <link>https://wasimlorgat.com/tils/how-to-share-terminal-demos-as-razor-sharp-animated-svg.html</link>
  <description><![CDATA[ 



<ol type="1">
<li><p>Install <a href="https://github.com/asciinema/asciinema">asciinema</a> and <a href="https://github.com/marionebl/svg-term-cli">svg-term-cli</a>.</p></li>
<li><p>Record with asciinema:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">asciinema</span> rec demo.cast</span></code></pre></div>
<p>This records the session in the <a href="https://github.com/asciinema/asciinema/blob/develop/doc/asciicast-v2.md">asciicast v2 plaintext file format</a> (newline-delimited JSON with an initial header object followed by a timestamped event stream of stdin and stdout).</p></li>
<li><p>Convert the <code>.cast</code> file to <code>.svg</code> with svg-term-cli:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">svg-term</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--in</span> demo.cast <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--out</span> demo.svg <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--window</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--width</span> 80 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--height</span> 22 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-optimize</span></span></code></pre></div>
<ul>
<li>You probably want to play around with <code>width</code> and <code>height</code></li>
<li><code>window</code> adds a fake OS window around the terminal session</li>
<li>I found that <code>no-optimize</code> fixed some weird font rendering issues on my macOS – not sure why</li>
</ul></li>
</ol>
<hr>
<p>Here’s an example I created for my blog post <a href="../posts/editor.html"><em>Build a text editor with Python and curses</em></a>:</p>
<p><img src="https://wasimlorgat.com/posts/images/editor.svg" class="img-fluid"></p>



 ]]></description>
  <category>terminal</category>
  <guid>https://wasimlorgat.com/tils/how-to-share-terminal-demos-as-razor-sharp-animated-svg.html</guid>
  <pubDate>Thu, 15 Dec 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Diagnosing an issue with plugin modules, process pools, and the import system</title>
  <link>https://wasimlorgat.com/tils/diagnosing-an-issue-with-plugin-modules-process-pools-and-the-import-system.html</link>
  <description><![CDATA[ 



<p>This is a walkthrough of the rather surprising mechanics underlying a failing test that brings together plugin modules (that register themselves on import), process pools, and Python’s import system.</p>
<section id="what-went-wrong" class="level2">
<h2 class="anchored" data-anchor-id="what-went-wrong">What went wrong</h2>
<p>It starts with a failed test:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">pat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\[\d, \d+.\d+, \d+.\d+, \d+.\d+, '\d\d:\d\d'\]"</span></span>
<span id="cb1-2">test_stdout(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: learn.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), pat, regex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<p>The idea is to test that calling <code>learn.fit(1)</code> writes text to <code>stdout</code> (<a href="https://en.wikipedia.org/wiki/Standard_streams#Standard_output_(stdout)">standard output</a>) that matches the regex pattern <code>pat</code>. For those less familiar, this form of testing is common in projects that use <code>nbdev</code>.</p>
<p>Here’s what actually happens:</p>
<ol type="1">
<li>The <code>nbprocess_test</code> command creates a <code>ProcessPoolExecutor</code> with some number of workers and tasks (each notebook being a separate task).</li>
<li>Worker 1 processes one task, say task 1, which creates an IPython <code>InteractiveShell</code>, then runs <code>import fastai.callbacks.progress</code> which adds <code>ProgressCallback</code> to the the variable <code>fastcore.basics.defaults</code>.</li>
<li>Worker 1 processes another task, say task 3, which creates a fresh <code>InteractiveShell</code>, calls <code>learner.fit</code>, and tests <code>stdout</code>. Since <code>ProgressCallback</code> has been registered <em>in this process</em> by task 1, a progress bar is also printed to <code>stdout</code>, breaking the test.</li>
</ol>
<p>Let’s break down the underlying mechanics. There are three behaviours that come together to cause this sequence of events:</p>
<ol type="1">
<li><strong><code>ProcessPoolExecutor</code>s reuse processes.</strong> It seems obvious in hindsight since that’s how pools usually work, but I had never realised it until now. In the example above, worker 1 executes task 1 and task 3 in the same process.</li>
<li><strong><code>fastai</code> callbacks register themselves on import</strong>. In this case, <code>fastai.callbacks.progress</code> adds <code>ProgressCallback</code> to <code>defaults.callbacks</code>.</li>
<li><strong>Changes to imported modules persist across IPython <code>InteractiveShell</code>s</strong>. <code>nbprocess_test</code> runs each test in parallel using <code>execnb</code>, which implements a sub-class of <code>InteractiveShell</code>.</li>
</ol>
<p>Next, we’ll verify these behaviours with tiny experiments. I highly recommend using tiny experiments to understand complex systems.</p>
</section>
<section id="processpoolexecutors-reuse-processes" class="level2">
<h2 class="anchored" data-anchor-id="processpoolexecutors-reuse-processes"><code>ProcessPoolExecutor</code>s reuse processes</h2>
<p>Perhaps we should know this simply from the name, but I didn’t, so we’ll figure it out with a tiny experiment. Start by creating a pool with 2 <code>max_workers</code>:</p>
<div id="de16d633" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> concurrent.futures <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ProcessPoolExecutor</span>
<span id="cb2-2"></span>
<span id="cb2-3">pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ProcessPoolExecutor(max_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<p>There aren’t any processes in the pool yet:</p>
<div id="5aefa6f4" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">pool._processes</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{}</code></pre>
</div>
</div>
<p>Submit a task: the function <code>os.getpid</code>, which will return the process ID of the worker that runs it. Since there are no processes in the pool, <code>submit</code> will start a new worker process, and have it execute the task. <code>ProcessPoolExecutor.submit</code> returns a <code>Future</code> object, and <code>Future.result</code> returns the task’s return value:</p>
<div id="83042bc6" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb5-2"></span>
<span id="cb5-3">future <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pool.submit(os.getpid)</span>
<span id="cb5-4">future.result()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>45907</code></pre>
</div>
</div>
<p>No matter how many times you manually rerun the above cell, it will aways be executed on the same process. Notice that the process is now also available in the pool:</p>
<div id="2289c195" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">pool._processes</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{45907: &lt;SpawnProcess name='SpawnProcess-1' pid=45907 parent=45899 started&gt;}</code></pre>
</div>
</div>
<p>If we submit another task:</p>
<div id="baeed3e4" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">future <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pool.submit(os.getpid)</span>
<span id="cb9-2">future.result()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>45907</code></pre>
</div>
</div>
<p>…it’s still executed on the same process.</p>
<p>Let’s try executing two processes at the same time:</p>
<div id="c75ca42a" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">futures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [pool.submit(os.getpid) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb11-2">[o.result() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> futures]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[45907, 45907]</code></pre>
</div>
</div>
<p>Weird. They’re both executed on the same process…</p>
<div id="3cdb6137" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">pool._processes</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{45907: &lt;SpawnProcess name='SpawnProcess-1' pid=45907 parent=45899 started&gt;,
 45908: &lt;SpawnProcess name='SpawnProcess-2' pid=45908 parent=45899 started&gt;}</code></pre>
</div>
</div>
<p>It looks like another process was started! I haven’t confirmed this, but I suspect that when we submitted two futures, the pool determined that it needed more workers, so it started another. However, the first worker’s task ended before the second worker started up, so the first worker processed both.</p>
<p>Since we instantiated the pool with 2 <code>max_workers</code>, these two processes will execute all tasks, no matter how many we submit:</p>
<div id="d9729925" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">futures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [pool.submit(os.getpid) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)]</span>
<span id="cb15-2">[o.result() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> futures]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[45907, 45907, 45907, 45907, 45907, 45907, 45907, 45907, 45907, 45907]</code></pre>
</div>
</div>
<p>Shutdown the pool to free up any resources:</p>
<div id="a58381d9" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">pool.shutdown()</span></code></pre></div>
</div>
</section>
<section id="fastai-callbacks-register-themselves-on-import" class="level2">
<h2 class="anchored" data-anchor-id="fastai-callbacks-register-themselves-on-import">fastai callbacks register themselves on import</h2>
<p>This one is easy to demonstrate. <code>defaults</code> has no <code>callbacks</code> attribute to start with:</p>
<div id="41907eba" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.basics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaults</span>
<span id="cb18-2"></span>
<span id="cb18-3">defaults</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>namespace(cpus=4)</code></pre>
</div>
</div>
<p><code>defaults.callbacks</code> is populated after importing <code>ProgressCallback</code>:</p>
<div id="cd08aee9" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.callback.progress <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ProgressCallback</span>
<span id="cb20-2"></span>
<span id="cb20-3">defaults</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>namespace(cpus=4,
          benchmark=True,
          use_cuda=None,
          activation=torch.nn.modules.activation.ReLU,
          callbacks=[fastai.callback.core.TrainEvalCallback,
                     fastai.learner.Recorder,
                     fastai.learner.CastToTensor,
                     fastai.callback.progress.ProgressCallback],
          lr=0.001)</code></pre>
</div>
</div>
</section>
<section id="changes-to-imported-modules-persist-across-ipython-interactiveshells" class="level2">
<h2 class="anchored" data-anchor-id="changes-to-imported-modules-persist-across-ipython-interactiveshells">Changes to imported modules persist across IPython <code>InteractiveShell</code>s</h2>
<p>Why is any of the above a problem? Didn’t we say that <code>nbprocess_test</code> creates a separate shell for each notebook? Yes it does, but it turns out that changes to imported modules persist across shells.</p>
<div id="d698070b" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> execnb.shell <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CaptureShell</span></code></pre></div>
</div>
<p>First make sure that <code>CaptureShell</code> doesn’t have a <code>foo</code> attribute - this will make sense in a second:</p>
<div id="8fb74dfa" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(CaptureShell, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'foo'</span>)</span></code></pre></div>
</div>
<p>Now add the <code>foo</code> attribute:</p>
<div id="3067eb49" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">CaptureShell.foo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span></span></code></pre></div>
</div>
<p>We can see <code>foo</code> inside a <code>CaptureShell</code>:</p>
<div id="c9bd3709" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">shell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CaptureShell()</span>
<span id="cb25-2">shell.run(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from execnb.shell import CaptureShell; CaptureShell.foo'</span>)</span>
<span id="cb25-3">shell.result</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'bar'</code></pre>
</div>
</div>
<p>This happens because when we first imported from the <code>execnb.shell</code> module it was cached in <code>sys.modules</code>:</p>
<div id="9f2ec767" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb27-2"></span>
<span id="cb27-3">sys.modules[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'execnb.shell'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;module 'execnb.shell' from '/Users/seem/code/execnb/execnb/shell.py'&gt;</code></pre>
</div>
</div>
<p>In fact, <code>sys.modules['execnb.shell'].CaptureShell</code> is another name for <code>CaptureShell</code>:</p>
<div id="f4299eeb" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">sys.modules[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'execnb.shell'</span>].CaptureShell <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> CaptureShell</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>True</code></pre>
</div>
</div>
<p>Python caches imports to speed up consecutive imports from the same modules. <code>InteractiveShell</code> (and its sub-classes) have the same <code>sys.modules</code> which causes this behaviour:</p>
<div id="5c203ac0" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">shell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CaptureShell()</span>
<span id="cb31-2">shell.run(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"import sys; sys.modules['execnb.shell'].CaptureShell.foo"</span>)</span>
<span id="cb31-3">shell.result</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'bar'</code></pre>
</div>
</div>
<p><code>exec</code> with empty <code>globals</code> and <code>locals</code> uses the same <code>sys.modules</code> too so it doesn’t avoid the issue:</p>
<div id="0297cddf" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"import sys; print('execnb.shell' in sys.modules)"</span>, {}, {})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>True</code></pre>
</div>
</div>
<div id="3c8af7e9" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from execnb.shell import CaptureShell; print(CaptureShell.foo)"</span>, {}, {})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>bar</code></pre>
</div>
</div>
<hr>
<p>In the end, we agreed that the test itself was broken, because it made assumptions about its environment without ensuring that they were true. Tests like this may fail - regardless of the above behaviour - if we import any module that registers a callback. For example, this fails too:</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.callback.progress <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb37-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nbprocess.test <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> test_nb</span>
<span id="cb37-3"></span>
<span id="cb37-4">test_nb(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nbs/nb_with_failing_test.ipynb'</span>)</span></code></pre></div>
<p>The fix is to explicitly run <code>learner.fit</code> with the precise list of callbacks required.</p>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://wasimlorgat.com/tils/diagnosing-an-issue-with-plugin-modules-process-pools-and-the-import-system.html</guid>
  <pubDate>Sun, 10 Jul 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Update fastai union annotations using ast</title>
  <link>https://wasimlorgat.com/tils/update-fastai-union-annotations-using-ast.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">

</div>
</div>
<div class="callout-body-container callout-body">
<p>This notebook doesn’t render correctly until I figure out how to tell Quarto to echo code cells as is without parsing directives.</p>
</div>
</div>
<p>This notebook defines and exports a lightweight command line tool that updates union annotations in notebooks from the fastai tuple style (<code>x:(int,str)</code>) to the Python 3.10 union operator (<code>x:int|str</code>), using the <a href="https://docs.python.org/3/library/ast.html"><code>ast</code></a> standard library, and developed with <a href="https://github.com/fastai/nbdev"><code>nbdev</code></a>.</p>
<p>::: {#85b7db48 .cell 0=‘e’ 1=‘x’ 2=‘p’ 3=‘o’ 4=‘r’ 5=‘t’}</p>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ast</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> execnb.nbio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> read_nb, write_nb</span></code></pre></div>
<p>:::</p>
<div id="283023cf" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.test <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> test_eq</span></code></pre></div>
</div>
<p>::: {#2e20197a .cell 0=‘e’ 1=‘x’ 2=‘p’ 3=‘o’ 4=‘r’ 5=‘t’}</p>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tuple2bitor(annot):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Convert fastai tuple style union annotation to py310 union operator"</span></span>
<span id="cb3-3">    bitor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annot.dims[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> right <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annot.dims[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]: bitor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ast.BinOp(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bitor, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>right, op<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ast.BitOr())</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> bitor</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tuple2bitorstr(annot): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ast.unparse(tuple2bitor(annot)).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span></code></pre></div>
<p>:::</p>
<div id="850c90a2" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ast.Tuple([ast.Name(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>o) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'str'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float'</span>)])</span>
<span id="cb4-2">test_eq(ast.unparse(a),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'(int, str, float)'</span>)</span>
<span id="cb4-3">test_eq(tuple2bitorstr(a),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int|str|float'</span>)</span></code></pre></div>
</div>
<p>::: {#938e7d41 .cell 0=‘e’ 1=‘x’ 2=‘p’ 3=‘o’ 4=‘r’ 5=‘t’}</p>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> split_parts(source, node):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Split `source` into parts before, containing, and after `node`"</span></span>
<span id="cb5-3">    lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> node.lineno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> node.end_lineno, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Multi-line annotations not supported'</span></span>
<span id="cb5-5">    l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node.lineno<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-6">    line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[l]</span>
<span id="cb5-7">    s,e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node.col_offset, node.end_col_offset</span>
<span id="cb5-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(lines[:l]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[line[:s]]), line[s:e], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join([line[e:]]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>lines[l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span></code></pre></div>
<p>:::</p>
<div id="f75a3180" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb6-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">def f(</span></span>
<span id="cb6-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    x: (int, str, float),</span></span>
<span id="cb6-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    y=5</span></span>
<span id="cb6-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">): pass'''</span></span>
<span id="cb6-6">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ast.parse(s)</span>
<span id="cb6-7">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n.body[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].args.args[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].annotation</span>
<span id="cb6-8">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_parts(s, a)</span>
<span id="cb6-9">test_eq(ps, (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">def f(</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    x: '</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'(int, str, float)'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">',</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    y=5</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">): pass'</span>))</span></code></pre></div>
</div>
<p>::: {#97788e4e .cell 0=‘e’ 1=‘x’ 2=‘p’ 3=‘o’ 4=‘r’ 5=‘t’}</p>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> replace_node(source, node, repl):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Replace `node` in `source` with `repl`"</span></span>
<span id="cb7-3">    parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_parts(source, node)</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> parts[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> repl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> parts[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<p>:::</p>
<div id="e8eef721" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">test_eq(replace_node(s, a, tuple2bitorstr(a)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">def f(</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    x: int|str|float,</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    y=5</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">): pass'</span>)</span></code></pre></div>
</div>
<p>::: {#373ffcf2 .cell 0=‘e’ 1=‘x’ 2=‘p’ 3=‘o’ 4=‘r’ 5=‘t’}</p>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fix_tuple_annots(source):</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Convert all fastai tuple style union annotations in `source` to py310 union operator"</span></span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb9-4">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ast.parse(source)</span>
<span id="cb9-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>: a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(o.annotation <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ast.walk(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(o,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'annotation'</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>),ast.Tuple))</span>
<span id="cb9-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">StopIteration</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> source</span>
<span id="cb9-7">        source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> replace_node(source, a, tuple2bitorstr(a))</span></code></pre></div>
<p>:::</p>
<div id="a708c5a6" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb10-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">@patch</span></span>
<span id="cb10-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">def crop_pad(x:TensorBBox|TensorPoint|Image.Image,</span></span>
<span id="cb10-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    sz:(int, tuple), # Crop/pad size of input, duplicated if one value is specified</span></span>
<span id="cb10-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    tl:tuple=None, # Optional top-left coordinate of the crop/pad, if `None` center crop</span></span>
<span id="cb10-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    orig_sz:tuple=None, # Original size of input</span></span>
<span id="cb10-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    pad_mode:PadMode=PadMode.Zeros, # Fastai padding mode</span></span>
<span id="cb10-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    resize_mode=BILINEAR, # Pillow `Image` resize mode</span></span>
<span id="cb10-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    resize_to:tuple=None # Optional post crop/pad resize of input</span></span>
<span id="cb10-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">):</span></span>
<span id="cb10-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    if isinstance(sz,int): sz = (sz,sz)</span></span>
<span id="cb10-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    orig_sz = fastuple(_get_sz(x) if orig_sz is None else orig_sz)</span></span>
<span id="cb10-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    sz,tl = fastuple(sz),fastuple(((_get_sz(x)-sz)//2) if tl is None else tl)</span></span>
<span id="cb10-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    return x._do_crop_pad(sz, tl, orig_sz=orig_sz, pad_mode=pad_mode, resize_mode=resize_mode, resize_to=resize_to)</span></span>
<span id="cb10-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb10-16"></span>
<span id="cb10-17">test_eq(fix_tuple_annots(s), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb10-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">@patch</span></span>
<span id="cb10-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">def crop_pad(x:TensorBBox|TensorPoint|Image.Image,</span></span>
<span id="cb10-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    sz:int|tuple, # Crop/pad size of input, duplicated if one value is specified</span></span>
<span id="cb10-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    tl:tuple=None, # Optional top-left coordinate of the crop/pad, if `None` center crop</span></span>
<span id="cb10-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    orig_sz:tuple=None, # Original size of input</span></span>
<span id="cb10-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    pad_mode:PadMode=PadMode.Zeros, # Fastai padding mode</span></span>
<span id="cb10-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    resize_mode=BILINEAR, # Pillow `Image` resize mode</span></span>
<span id="cb10-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    resize_to:tuple=None # Optional post crop/pad resize of input</span></span>
<span id="cb10-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">):</span></span>
<span id="cb10-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    if isinstance(sz,int): sz = (sz,sz)</span></span>
<span id="cb10-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    orig_sz = fastuple(_get_sz(x) if orig_sz is None else orig_sz)</span></span>
<span id="cb10-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    sz,tl = fastuple(sz),fastuple(((_get_sz(x)-sz)//2) if tl is None else tl)</span></span>
<span id="cb10-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    return x._do_crop_pad(sz, tl, orig_sz=orig_sz, pad_mode=pad_mode, resize_mode=resize_mode, resize_to=resize_to)</span></span>
<span id="cb10-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>)</span></code></pre></div>
</div>
<p>::: {#4d7c66ca .cell 0=‘e’ 1=‘x’ 2=‘p’ 3=‘o’ 4=‘r’ 5=‘t’}</p>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fix_nb_tuple_annots(nb):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Convert all fastai tuple style union annotations in `nb` to py310 union operator"</span></span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> cell <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nb.cells:</span>
<span id="cb11-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>: cell.source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fix_tuple_annots(cell.source)</span>
<span id="cb11-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">SyntaxError</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
<p>:::</p>
<p>::: {#a230fa3b .cell 0=‘e’ 1=‘x’ 2=‘p’ 3=‘o’ 4=‘r’ 5=‘t’}</p>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.script <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@call_parse</span></span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main(fname:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A notebook name or glob to convert</span></span>
<span id="cb12-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Convert all fastai tuple style union annotations in `nb_path` to py310 union operators"</span></span>
<span id="cb12-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> globtastic(fname, file_glob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.ipynb'</span>, skip_folder_re<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^[_.]'</span>):</span>
<span id="cb12-8">        nb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_nb(f)</span>
<span id="cb12-9">        fix_nb_tuple_annots(nb)</span>
<span id="cb12-10">        write_nb(nb, f)</span></code></pre></div>
<p>:::</p>



 ]]></description>
  <category>notebooks</category>
  <category>python</category>
  <guid>https://wasimlorgat.com/tils/update-fastai-union-annotations-using-ast.html</guid>
  <pubDate>Fri, 08 Jul 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Compiling Python to C using setuptools and Cython</title>
  <link>https://wasimlorgat.com/tils/compiling-python-to-c-using-setuptools-and-cython.html</link>
  <description><![CDATA[ 



<p><a href="https://github.com/wesselb/plum/blob/master/setup.py"><code>plum</code></a><sup>1</sup> compiles an ordinary Python file into an extension module (in C) using <a href="https://cython.org/">Cython</a> and <a href="https://setuptools.pypa.io/"><code>setuptools</code></a>’ Cython integration. It’s the first time I’ve encountered this, so here’s a high-level description of how it works.</p>
<p>In <code>setup.py</code>, pass the <code>ext_modules</code> arg to <code>setup</code>, wrapping an <code>Extension</code> that points to the module you want to compile:</p>
<p>```python hl_lines=‘9’ from setuptools import setup, Extension</p>
<p>setup( # … ext_modules=[Extension(“plum.function”, [“plum/function.py”])], )</p>
<pre><code>
`setuptools` has built-in [Cython integration](https://setuptools.pypa.io/en/latest/userguide/ext_modules.html#distributing-extensions-compiled-with-cython). If it finds that Cython is installed, it'll use it to build extensions with `.py` and `.pyx` sources. Including Cython as a build dependency in `pyproject.toml` ensures that it's installed and ready to go:

```toml
[build-system]
requires = [
    # ...
    "cython",
]</code></pre>
<section id="whats-a-python-extension-module" class="level2">
<h2 class="anchored" data-anchor-id="whats-a-python-extension-module">What’s a Python extension module?</h2>
<p>An extension module is a program written in C (or C++) that uses Python’s C API to hook into Python’s run-time system. Interop works both ways: you can call Python objects from C and vice versa. A common reason for using extensions is improved speed. See <a href="https://docs.python.org/3/extending/extending.html">the official docs on extension modules</a> for more.</p>
</section>
<section id="whats-cython" class="level2">
<h2 class="anchored" data-anchor-id="whats-cython">What’s Cython?</h2>
<p>Cython is a compiler for compiling programs written in Python and the Cython programming language into C extension modules. I’d recommend the reading through <a href="https://cython.readthedocs.io/en/latest/src/quickstart/overview.html">the rather friendly documentation as well</a>.</p>


</section>
<aside id="footnotes" class="footnotes footnotes-end-of-document">
<hr>
<ol>
<li id="fn1"><p><code>plum</code> is a really cool library that brings <a href="https://docs.julialang.org/en/v1/manual/methods/">Julia-style typed multiple dispatch</a> to Python!↩︎</p></li>
</ol>
</aside>

 ]]></description>
  <category>python</category>
  <guid>https://wasimlorgat.com/tils/compiling-python-to-c-using-setuptools-and-cython.html</guid>
  <pubDate>Mon, 04 Jul 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating a minimal custom Jupyter widget</title>
  <link>https://wasimlorgat.com/tils/creating-a-minimal-custom-jupyter-widget.html</link>
  <description><![CDATA[ 



<p>I couldn’t find a super minimal example of implementing a custom Jupyter widget, so here it is. This is based on Pierre Marion’s <a href="https://github.com/PierreMarion23/jupyter-widget-hello-world-binder"><em>Binder Repo for Hello World Jupyter Widget</em></a>.</p>
<div id="7e052724" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ipywidgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> widgets</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> traitlets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Unicode, validate</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> HelloWidget(widgets.DOMWidget):</span>
<span id="cb1-6">    _view_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Unicode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HelloView'</span>).tag(sync<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-7">    _view_module <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Unicode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hello'</span>).tag(sync<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-8">    _view_module_version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Unicode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0.1.0'</span>).tag(sync<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-9">    value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Unicode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello World!'</span>).tag(sync<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="ab039400" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>javascript</span>
<span id="cb2-2">require.undef(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hello'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-3"></span>
<span id="cb2-4">define(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hello'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@jupyter-widgets/base"</span>], function(widgets) {</span>
<span id="cb2-5"></span>
<span id="cb2-6">    var HelloView <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> widgets.DOMWidgetView.extend({</span>
<span id="cb2-7"></span>
<span id="cb2-8">        render: function() { </span>
<span id="cb2-9">            this.el.textContent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> this.model.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb2-10">        },</span>
<span id="cb2-11">    })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb2-14">        HelloView : HelloView</span>
<span id="cb2-15">    }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-16">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/javascript">
require.undef('hello');

define('hello', ["@jupyter-widgets/base"], function(widgets) {

    var HelloView = widgets.DOMWidgetView.extend({

        render: function() { 
            this.el.textContent = this.model.get('value'); 
        },
    });

    return {
        HelloView : HelloView
    };
});

</script>
</div>
</div>
<div id="1b55d278" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">HelloWidget()</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d90cd88266104b9d82e44ddfaf404407","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<section id="further-reading" class="level2">
<h2 class="anchored" data-anchor-id="further-reading">Further reading</h2>
<p>Here are some great articles that I referenced while exploring this topic:</p>
<ul>
<li><a href="https://github.com/PierreMarion23/jupyter-widget-hello-world-binder">Binder Repo for Hello World Jupyter Widget</a></li>
<li><a href="https://blog.jupyter.org/authoring-custom-jupyter-widgets-2884a462e724">Authoring Custom Jupyter Widgets: A Hands-On Guide</a></li>
<li><a href="https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Custom.html">ipywidgets Official Documentation: Building a Custom Widget - Email widget</a></li>
<li><a href="https://github.com/PierreMarion23/jupyter-widget-hello-world-binder">Binder Repo for Hello World Jupyter Widget</a></li>
<li><a href="https://jakevdp.github.io/blog/2013/06/01/ipython-notebook-javascript-python-communication/">IPython Notebook: Javascript/Python Bi-directional Communication</a>. I think this may have been the birth of ipywidgets!</li>
</ul>


</section>

 ]]></description>
  <category>notebooks</category>
  <guid>https://wasimlorgat.com/tils/creating-a-minimal-custom-jupyter-widget.html</guid>
  <pubDate>Thu, 23 Jun 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Point and click directory navigation inside a Jupyter notebook</title>
  <link>https://wasimlorgat.com/tils/point-and-click-directory-navigation-inside-a-jupyter-notebook.html</link>
  <description><![CDATA[ 



<p>Here’s a tiny demo of a point-and-click navigation interface with rich output powered by Jupyter notebooks and ipywidgets! I originally mentioned the idea in <a href="../tils/create-and-execute-cells-inside-a-jupyter-notebook.html">a previous TIL</a>. I also <a href="https://twitter.com/wasimlorgat/status/1539605620130603008">tweeted about it</a> which is the best place to leave any comments or questions if you’d like.</p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">TL;DR</h2>
<p>If all you need is a copy-pastable code snippet, here you go. Read on for a more in-depth description.</p>
<div id="d1642696" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> base64 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> b64encode</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Javascript, display</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ipywidgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Box, Button, Layout</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_code_cell(code):</span>
<span id="cb1-8">    encoded_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b64encode(code.encode()).decode()</span>
<span id="cb1-9">    display(Javascript(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb1-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        var code = IPython.notebook.insert_cell_below('code');</span></span>
<span id="cb1-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        code.set_text(atob("</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>encoded_code<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"));</span></span>
<span id="cb1-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        code.execute();</span></span>
<span id="cb1-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        code.focus_cell()"""</span>))</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> on_click_dir(path, button): create_code_cell(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"ls('</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">')"</span>)</span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> on_click_file(path, button): create_code_cell(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Path('</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">')"</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ls(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Path()):</span>
<span id="cb1-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(root, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>): root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(root).expanduser()</span>
<span id="cb1-20">    paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(root.iterdir())</span>
<span id="cb1-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> paths: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb1-22">    button_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fit-content'</span>)</span>
<span id="cb1-23">    buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> paths:</span>
<span id="cb1-25">        button <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Button(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(path.relative_to(root)), layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>button_layout)</span>
<span id="cb1-26">        button.on_click(partial(on_click_dir <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> path.is_dir() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> on_click_file, path))</span>
<span id="cb1-27">        buttons.append(button)</span>
<span id="cb1-28">    box_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout(overflow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scroll hidden'</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'500px'</span>, display<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flex'</span>,</span>
<span id="cb1-29">                        flex_flow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'column wrap'</span>, align_content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flex-start'</span>)</span>
<span id="cb1-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Box(buttons, layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>box_layout)</span></code></pre></div>
</div>
</section>
<section id="minimal-implementation" class="level2">
<h2 class="anchored" data-anchor-id="minimal-implementation">Minimal implementation</h2>
<p>We start by defining a function to create and execute a code cell below the focused cell (see <a href="../tils/create-and-execute-cells-inside-a-jupyter-notebook.html">my previous TIL</a> if you’d like more detail on this part):</p>
<div id="585a1a8a" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_code_cell(code):</span>
<span id="cb2-2">    encoded_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b64encode(code.encode()).decode()</span>
<span id="cb2-3">    display(Javascript(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb2-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        var code = IPython.notebook.insert_cell_below('code');</span></span>
<span id="cb2-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        code.set_text(atob("</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>encoded_code<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"));</span></span>
<span id="cb2-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        code.execute();</span></span>
<span id="cb2-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        code.focus_cell()</span></span>
<span id="cb2-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span>))</span></code></pre></div>
</div>
<p>We’re going to be using button widgets, which expect an on-click callback, so let’s define those next. The callback is expected to be a function accepting a single argument, <code>button</code>, to which the button object itself is passed - although we won’t be using it. We need to know the path that was clicked on as well, so we’ll have to <code>partial</code> that in later:</p>
<div id="e57714b3" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> on_click_dir(path, button): create_code_cell(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"ls('</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">')"</span>)</span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> on_click_file(path, button): create_code_cell(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Path('</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">')"</span>)</span></code></pre></div>
</div>
<p>Test if it works:</p>
<div id="5e70bd3b" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">on_click_file(Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'point-and-click-directory-navigation-inside-a-jupyter-notebook.ipynb'</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/javascript">

        var code = IPython.notebook.insert_cell_below('code');
        code.set_text(atob("UGF0aCgncG9pbnQtYW5kLWNsaWNrLWRpcmVjdG9yeS1uYXZpZ2F0aW9uLWluc2lkZS1hLWp1cHl0ZXItbm90ZWJvb2suaXB5bmInKQ=="));
        code.execute();
        code.focus_cell()
    
</script>
</div>
</div>
<div id="eb304102" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'point-and-click-directory-navigation-inside-a-jupyter-notebook.ipynb'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>PosixPath('point-and-click-directory-navigation-inside-a-jupyter-notebook.ipynb')</code></pre>
</div>
</div>
<p>Neat! The cell above this was created by calling <code>on_click_file</code>.</p>
<p>Finally, we implement a straightforward minimal <code>ls</code> function using <code>Button</code> widgets for <code>Path</code>s, and wrapping those in a <code>VBox</code> widget:</p>
<div id="428247d4" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ipywidgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> VBox</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ls(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Path()):</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(root, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>): root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(root).expanduser()</span>
<span id="cb7-5">    paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(root.iterdir())</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> paths: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb7-7">    buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> paths:</span>
<span id="cb7-9">        button <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Button(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(path))</span>
<span id="cb7-10">        button.on_click(partial(on_click_dir <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> path.is_dir() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> on_click_file, path))</span>
<span id="cb7-11">        buttons.append(button)</span>
<span id="cb7-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> VBox(buttons)</span></code></pre></div>
</div>
</section>
<section id="improved-styling" class="level2">
<h2 class="anchored" data-anchor-id="improved-styling">Improved styling</h2>
<p>I don’t like how the implementation above is styled, so here is another with a few purely stylistic improvements:</p>
<div id="29a177c1" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ls(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Path()):</span>
<span id="cb8-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(root, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>): root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(root).expanduser()</span>
<span id="cb8-3">    paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(root.iterdir())</span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> paths: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb8-5">    button_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fit-content'</span>)</span>
<span id="cb8-6">    buttons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> paths:</span>
<span id="cb8-8">        button <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Button(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(path.relative_to(root)), layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>button_layout)</span>
<span id="cb8-9">        button.on_click(partial(on_click_dir <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> path.is_dir() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> on_click_file, path))</span>
<span id="cb8-10">        buttons.append(button)</span>
<span id="cb8-11">    box_layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layout(overflow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scroll hidden'</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'500px'</span>, display<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flex'</span>,</span>
<span id="cb8-12">                        flex_flow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'column wrap'</span>, align_content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flex-start'</span>)</span>
<span id="cb8-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Box(buttons, layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>box_layout)</span></code></pre></div>
</div>
<div id="2c1adb10" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">ls(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'~/code/fastai'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"169fb41e3a56421dba0169a52f8d35f4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>Unfortunately, my current blog setup doesn’t support widgets, but you should be able to run this locally. You can also check out the <a href="https://twitter.com/wasimlorgat/status/1539605620130603008">demo video in my tweet</a>.</p>
<p>If you pay close attention to the demo video, you’ll notice that it’s still styled slightly differently to what we’ve built here. Some styles can’t be changed through ipywidget’s <code>style</code> interface, so that was achieved by manually writing CSS with the <code>%%html</code> magic command followed by a <code>&lt;style&gt;...&lt;/style&gt;</code> tag, and then assigning a class to the buttons and boxes using their <code>add_class</code> method. I also implemented a custom widget with a small <code>render</code> JavaScript function that resized the output grid until it fit the width of the screen.</p>
<p>I’m really excited with how this turned out! And it was far simpler than I’d expected. I’ll definitely be exploring the point-and-click navigation pattern more. I’m thinking about trying it out for exploring documentation about Python objects.</p>


</section>

 ]]></description>
  <category>notebooks</category>
  <guid>https://wasimlorgat.com/tils/point-and-click-directory-navigation-inside-a-jupyter-notebook.html</guid>
  <pubDate>Thu, 23 Jun 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Create and execute cells inside a Jupyter notebook</title>
  <link>https://wasimlorgat.com/tils/create-and-execute-cells-inside-a-jupyter-notebook.html</link>
  <description><![CDATA[ 



<p>I’ve been thinking a lot about <a href="https://twitter.com/wasimlorgat/status/1536549059292692481">unique Jupyter notebook interactions</a>. A pattern that keeps coming up in my head is to click on the output of one cell to create a new cell below it. For example, <code>ls()</code> could output file and directory widgets for the current directory. Clicking on a directory widget, say <code>foo</code>, could create a code cell below with code <code>ls(foo)</code>, to interactively browse through files.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Update (2022-06-23)
</div>
</div>
<div class="callout-body-container callout-body">
<p>I’ve created a working demo of <a href="../tils/point-and-click-directory-navigation-inside-a-jupyter-notebook.html">point-and-click directory navigation</a> using this pattern!.</p>
</div>
</div>
<p>I found <a href="https://nbviewer.org/gist/fperez/0fb77c5faea8996208a7/NewCodeCellWidget.ipynb">this amazing gist</a> by <a href="http://fperez.org/">Fernando Perez</a> (originally by Jonathan Frederic, see the gist for more links) which enables this pattern! It turns out that IPython makes this pretty straightforward. You directly execute JavaScript code against the <code>IPython</code> API that creates a code cell, sets the text of the cell (which must be base64 encoded), then executes it:</p>
<div id="121f7c34" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> base64</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Javascript</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ipywidgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Button</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_code_cell():</span>
<span id="cb1-6">    code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"print('Hello world!')"</span></span>
<span id="cb1-7">    encoded_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base64.b64encode(code.encode()).decode()</span>
<span id="cb1-8">    display(Javascript(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''</span></span>
<span id="cb1-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        var code = IPython.notebook.insert_cell_below('code');</span></span>
<span id="cb1-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        code.set_text(atob("</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>encoded_code<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"));</span></span>
<span id="cb1-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        code.execute();</span></span>
<span id="cb1-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    '''</span>))</span>
<span id="cb1-13"></span>
<span id="cb1-14">create_code_cell()</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/javascript">

        var code = IPython.notebook.insert_cell_below('code');
        code.set_text(atob("cHJpbnQoJ0hlbGxvIHdvcmxkIScp"));
        code.execute();
    
</script>
</div>
</div>
<div id="be26462b" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello world!'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello world!</code></pre>
</div>
</div>
<p>I didn’t know that there was a neat JavaScript API inside Jupyter notebooks, but it does make sense that it exists. It’s also really useful to browse the API using your browser’s console via auto-complete on the <code>IPython</code> object:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/tils/images/ipython-javascript-api.png" class="rounded border shadow-sm preview-image img-fluid figure-img" alt="Browser console with code: IPython.notebook" width="500"></p>
</figure>
</div>



 ]]></description>
  <category>notebooks</category>
  <guid>https://wasimlorgat.com/tils/create-and-execute-cells-inside-a-jupyter-notebook.html</guid>
  <pubDate>Wed, 22 Jun 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Setting up TILs in Pelican</title>
  <link>https://wasimlorgat.com/tils/setting-up-tils-in-pelican.html</link>
  <description><![CDATA[ 



<p>Inspired by <a href="https://til.simonwillison.net/">Simon Willison</a>, I started writing <a href="../tils/">TILs</a> (today I learned). I find it incredibly helpful to write as I code, but most of that writing has never left my private notebooks. TILs are my attempt at documenting and sharing my day-to-day learnings in case they might help others. The focus on learning also feels less daunting than writing blog posts.</p>
<p>I wanted to support TILs on my blog as a separate set of posts with their own listing page. Thanks to <a href="https://docs.getpelican.com/en">Pelican’s</a> incredible flexibility, this was quite easy!</p>
<p>Following these steps requires using a custom theme. I personally use a custom theme (forked from the builtin <em>simple</em> theme) precisely so that I can easily make these sorts of customisations.</p>
<section id="reconfigure-your-archives" class="level2">
<h2 class="anchored" data-anchor-id="reconfigure-your-archives">Reconfigure your archives</h2>
<p>Start by renaming <code>archives.html</code> to <code>posts/index.html</code> (relative to your theme’s <code>templates</code> directory).</p>
<p>Edit the loop over <code>dates</code> in <code>posts/index.html</code> to exclude articles tagged <code>til</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">{<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> article <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dates <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'til'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> article.tags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>default([]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>}</span></code></pre></div>
<p>Add the new path to <code>DIRECT_TEMPLATES</code>, the corresponding line of my <code>pelicanconf.py</code> now looks like:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">DIRECT_TEMPLATES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'posts/index'</span>]</span></code></pre></div>
<p>… because I don’t have tag or category pages yet. Disable the original archives page:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">ARCHIVES_SAVE_AS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span></code></pre></div>
<p>It should be working as it was before, but we’re now able to add a few more listings in the same way!</p>
</section>
<section id="create-the-tils-listing" class="level2">
<h2 class="anchored" data-anchor-id="create-the-tils-listing">Create the TILs listing</h2>
<p>Copy <code>posts/index.html</code> to <code>tils/index.html</code>, and edit the for loop to <em>only include</em> articles tagged <code>til</code> (note that the <code>not</code> from before is missing):</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">{<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> article <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dates <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'til'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> article.tags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>default([]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>}</span></code></pre></div>
<p>Add the new path to <code>DIRECT_TEMPLATES</code> in your <code>pelicanconf.py</code>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">DIRECT_TEMPLATES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'posts/index'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tils/index'</span>]</span></code></pre></div>
<p>You probably also want to link to the listing from your nav bar. For my theme, that’s done by adding a line to the <code>&lt;nav&gt;</code> tag in my <code>base.html</code> template:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;a</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">href</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{ SITEURL }}/tils/"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span>TILs<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/a&gt;</span></span></code></pre></div>
</section>
<section id="hack-article-urls" class="level2">
<h2 class="anchored" data-anchor-id="hack-article-urls">Hack article URLs</h2>
<p>This is my favourite part! At this point, you should have two working listings, but TIL article URLs will be the same as any other article. Pelican determines the URL and output location of an article by calling <code>format</code> with the article’s metadata on strings <code>ARTICLE_URL</code> and <code>ARTICLE_SAVE_AS</code>. That means we can implement a tiny string class with a custom <code>format</code> to dynamically set the URL of TILs to <code>tils/{slug}</code> and of posts to <code>posts/{slug}</code>!</p>
<p>Simply include the following in your <code>pelicanconf.py</code>:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ArticleUrl(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,tags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[],<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tils/'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'til'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tags <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'posts/'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb7-3"></span>
<span id="cb7-4">ARTICLE_URL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ArticleUrl(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{slug}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/'</span>)</span>
<span id="cb7-5">ARTICLE_SAVE_AS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ArticleUrl(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{slug}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/index.html'</span>)</span></code></pre></div>
</section>
<section id="update-invoke-task" class="level2">
<h2 class="anchored" data-anchor-id="update-invoke-task">Update invoke task</h2>
<p>If you’re using live reload via the <code>invoke livereload</code> task, you’ll need to update your task definition to include nested HTML files in your theme:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode diff code-with-copy"><code class="sourceCode diff"><span id="cb8-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-    server.watch('{}/templates/*.html'.format(theme_path), lambda: build(c))</span></span>
<span id="cb8-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">+    server.watch('{}/templates/**/*.html'.format(theme_path), lambda: build(c))</span></span></code></pre></div>


</section>

 ]]></description>
  <category>pelican</category>
  <guid>https://wasimlorgat.com/tils/setting-up-tils-in-pelican.html</guid>
  <pubDate>Tue, 21 Jun 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Using Pelican as a library</title>
  <link>https://wasimlorgat.com/tils/using-pelican-as-a-library.html</link>
  <description><![CDATA[ 



<p>In this post you’ll learn how to use <a href="https://docs.getpelican.com/">Pelican</a> (a Python static site generator) programmatically rather than through its command-line interface. This will give you a better understanding of how Pelican works internally and enable you to customise it for your needs.</p>
<section id="how-pelican-works" class="level2">
<h2 class="anchored" data-anchor-id="how-pelican-works">How Pelican works</h2>
<p>Pelican’s highest-level of abstraction is its command-line interface, which you would typically use as follows:</p>
<pre class="console"><code>$ pelican content output -s pelicanconf.py</code></pre>
<p>This would read all articles and pages in the <code>content</code> directory, convert them to HTML, render web pages with the relevant Jinja templates, and write the resulting static website to the <code>output</code> directory.</p>
<p>The rough flow to achieve this is as follows:</p>
<ul>
<li>Instantiate a list of <code>Generator</code>s (which house all of the relevent <code>Reader</code>s and a jinja <code>Environment</code>) and a <code>Writer</code>.</li>
<li>For each <code>Generator</code>:
<ul>
<li>Call the <code>generate_context</code> method, which reads the input files, converts them to HTML, and adds the outputs to a <code>context</code> dictionary.</li>
<li>Call the <code>generate_output</code> method, passing the <code>Writer</code> and <code>context</code>. This gets the relevant jinja <code>Template</code> from the <code>Environment</code>, renders it with the provided <code>context</code>, and writes the result to the final output directory.</li>
</ul></li>
</ul>
<p>As you can see, <code>Generator</code>s are responsible for glueing together the lower-level components: <code>Reader</code>, jinja <code>Template</code>, and <code>Writer</code>. In order to understand each of these components, we’ll reimplement the core logic of a <code>Generator</code> from scratch!</p>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>Start by setting <code>root</code> to the directory of your Pelican website. If you don’t yet have a website, follow <a href="https://docs.getpelican.com/en/latest/quickstart.html">Pelican’s informative documentation</a> to get started:</p>
<div id="c87a3a7b" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-2"></span>
<span id="cb2-3">root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'..'</span>)</span></code></pre></div>
</div>
<p>Now we can load our <code>pelicanconf.py</code> settings file. Pelican provides a function for this which handles details like applying defaults:</p>
<div id="614ef1d8" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pelican.settings <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> read_settings</span>
<span id="cb3-2"></span>
<span id="cb3-3">settings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_settings(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pelicanconf.py'</span>)</span></code></pre></div>
</div>
<p>Let’s create a quick blog post for testing. I prefer to write more technical blog posts in Jupyter notebooks but we’ll use markdown here since Pelican supports it natively.</p>
<div id="5925cbed" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">post_filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content/2022-06-20-hello-pelican.md'</span></span></code></pre></div>
</div>
<div id="205d5022" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>writefile {post_filepath}</span>
<span id="cb5-2">Title: Hello Pelican</span>
<span id="cb5-3">Slug: hello<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pelican</span>
<span id="cb5-4">Author: Wasim Lorgat</span>
<span id="cb5-5">Date: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb5-6">Tags: python, pelican</span>
<span id="cb5-7">Category: python</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Welcome</span></span>
<span id="cb5-10"></span>
<span id="cb5-11">Hello <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> welcome to our markdown blog post<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Writing ../content/2022-06-20-hello-pelican.md</code></pre>
</div>
</div>
</section>
<section id="reader" class="level2">
<h2 class="anchored" data-anchor-id="reader"><code>Reader</code></h2>
<p>We’ll start by instantiating a <code>MarkdownReader</code> to read our blog post. We’re using a <code>MarkdownReader</code> because we wrote the post in markdown, but Pelican also provides <code>HTMLReader</code> and <code>RstReader</code> if you prefer those formats.</p>
<div id="def5e55a" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pelican.readers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MarkdownReader</span>
<span id="cb7-2"></span>
<span id="cb7-3">reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MarkdownReader(settings)</span></code></pre></div>
</div>
<p>The most important part of a <code>Reader</code> is its <code>read</code> method which accepts a file path and returns the contents of the file in HTML format along with metadata about the file:</p>
<div id="750dd968" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">content, metadata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reader.read(post_filepath)</span></code></pre></div>
</div>
<p>… <code>content</code> is a string containing the blog post content converted to HTML. Since this was written in a notebook, we can use an <code>IPython</code> function to render it directly!</p>
<div id="772f7dbf" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.core.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HTML</span>
<span id="cb9-2">HTML(content)</span></code></pre></div>
<div class="cell-output cell-output-display">
<h2 id="welcome" class="anchored">Welcome</h2>
<p>Hello and welcome to our markdown blog post!</p>
</div>
</div>
<p>… and <code>metadata</code> is a dictionary that describes the file:</p>
<div id="ea6bbbf5" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">metadata</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'title': 'Hello Pelican',
 'slug': 'hello-pelican',
 'author': &lt;Author 'Wasim Lorgat'&gt;,
 'date': SafeDatetime(2022, 6, 20, 0, 0),
 'tags': [&lt;Tag 'python'&gt;, &lt;Tag 'pelican'&gt;],
 'category': &lt;Category 'python'&gt;}</code></pre>
</div>
</div>
</section>
<section id="writer" class="level2">
<h2 class="anchored" data-anchor-id="writer"><code>Writer</code></h2>
<p>Now that we have the contents of the post in HTML format, we’ll render it into a static web page using a <code>Writer</code>. However, we first need to create an appropriate jinja <code>Template</code>. Jinja provides the <code>Environment</code> class for reusing functionality across templates so we’ll use that here.</p>
<p>Pelican searches for templates in the following order:</p>
<ol type="1">
<li>Individual template overrides, via <code>settings['THEME_TEMPLATES_OVERRIDES']</code>.</li>
<li>The configured theme, via <code>settings['THEME']</code>.</li>
<li>The default <em>simple</em> theme packaged with Pelican.</li>
</ol>
<p>We can implement this search order using a <code>FileSystemLoader</code>, housed in an <code>Environment</code> for convenience:</p>
<div id="90dcc6f9" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pelican</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jinja2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Environment, FileSystemLoader</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb12-4"></span>
<span id="cb12-5">template_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(Path(o) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> settings[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'THEME_TEMPLATES_OVERRIDES'</span>]),</span>
<span id="cb12-6">                  Path(settings[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'THEME'</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'templates'</span>,</span>
<span id="cb12-7">                  Path(pelican.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>).parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'themes/simple/templates'</span>]</span>
<span id="cb12-8">env <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Environment(loader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>FileSystemLoader(template_paths),</span>
<span id="cb12-9">                  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>settings[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'JINJA_ENVIRONMENT'</span>])</span></code></pre></div>
</div>
<p>Now we can get the <em>article</em> template:</p>
<div id="26c5a7f8" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> env.get_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'article.html'</span>)</span></code></pre></div>
</div>
<p>The last step of preparation is to create the <code>context</code> dictionary that’s passed through to the <code>Template</code> to render the article:</p>
<div id="c51c40b9" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pelican.contents <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Article</span>
<span id="cb14-2"></span>
<span id="cb14-3">context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> settings.copy()</span>
<span id="cb14-4">article <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Article(content, metadata, settings, post_filepath, context)</span>
<span id="cb14-5">article.readtime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minutes'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>}  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: this is a workaround to support the readtime plugin that I use</span></span>
<span id="cb14-6">context[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'article'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> article</span></code></pre></div>
</div>
<p>And now we can write the final result!</p>
<div id="665869e9" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pelican.writers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Writer</span>
<span id="cb15-2"></span>
<span id="cb15-3">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span></span>
<span id="cb15-4">writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Writer(output_dir, settings)</span>
<span id="cb15-5">writer.write_file(Path(post_filepath.name).with_suffix(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.html'</span>), template, context)</span></code></pre></div>
</div>
<p>Let’s read it back in and see what it looks like. We’ll extract only the body using a simple regex - I’d usually recommend considering <a href="https://beautiful-soup-4.readthedocs.io/en/latest/">Beautiful Soup</a> for parsing HTML but regex works fine for our case:</p>
<div id="e0cadc5b" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(output_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-06-20-hello-pelican.html'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f: html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb16-4">body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;body&gt;(.*?)&lt;/body&gt;'</span>, html, re.DOTALL)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].strip()</span>
<span id="cb16-5">HTML(body)</span></code></pre></div>
<div class="cell-output cell-output-display">



<h1>
  <a href="../posts/hello-pelican/">
    Hello Pelican
  </a>
</h1>

<p class="article-meta">
  June 20, 2022 • 1 min read
</p>

<h2 id="welcome" class="anchored">Welcome</h2>
<p>Hello and welcome to our markdown blog post!</p>
</div>
</div>
<p>The provided templates have added a navigation bar at the top, a title below that, as well as the publication date and estimated reading time. And that’s it, we’ve successfully rendered a blog post web page using Pelican’s low-level components!</p>
<p>Before we end off, clean up the files we made along the way:</p>
<div id="718011e4" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shutil</span>
<span id="cb17-2">shutil.rmtree(output_dir, ignore_errors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb17-3">post_filepath.unlink(missing_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>pelican</category>
  <guid>https://wasimlorgat.com/tils/using-pelican-as-a-library.html</guid>
  <pubDate>Mon, 20 Jun 2022 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
