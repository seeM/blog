<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Wasim Lorgat</title>
<link>https://wasimlorgat.com/</link>
<atom:link href="https://wasimlorgat.com/index.xml" rel="self" type="application/rss+xml"/>
<description>A collection of technical blogs and talks on software engineering and machine learning.</description>
<generator>quarto-1.7.2</generator>
<lastBuildDate>Tue, 23 May 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Building a cost-effective image vector search engine with CLIP</title>
  <link>https://wasimlorgat.com/posts/image-vector-search.html</link>
  <description><![CDATA[ 




<p><img src="https://wasimlorgat.com/posts/images/vector-search.png" class="preview-image img-fluid"></p>
<p>I built an image vector search engine named <a href="https://meepo.shop">Meepo</a> for a local (South African üáøüá¶) eCommerce store. Thanks to the power and availability of foundational neural networks, open-source software, and cloud infrastructure ‚Äì along with a touch of good planning ‚Äì the entire process took me just one week, and it costs me a mere $30 per month to host.</p>
<p>Honestly, it blows my mind that this is possible. Decades of hard work by some of the brightest minds have enabled us to create and distribute incredible AI-powered products from almost anywhere in the world.</p>
<p><strong>In this post, I show you how to build your own image vector search engine.</strong></p>
<p>By the end of the post you‚Äôll be able to search through a dataset of pet images for queries as obscure as ‚Äúa fluffy pink cat on a tv‚Äù ‚Äì and it‚Äôll work! You‚Äôll also have a concrete idea of how to structure and deploy your own search engine.</p>
<p>We‚Äôll get there in three parts:</p>
<ul>
<li><strong>Part 1: Background.</strong> We discuss why you might need vector search over regular search, how the underlying technology works, and its little-known roots in the medical domain.</li>
<li><strong>Part 2: Let‚Äôs build a search engine for the Oxford Pets dataset.</strong> We build the core of our own vector search engine from scratch. We use a dataset with a good size and complexity to demonstrate the power of the technique without slowing down iteration. However, I urge you to try it out on your own dataset too!</li>
<li><strong>Part 3: Tips for deploying your search engine.</strong> I share how Meepo is architected and deployed, as well as a few tips that you might find helpful to ship your search engine quickly and cheaply.</li>
</ul>
<section id="part-1-background" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="part-1-background">Part 1: Background</h2>
<section id="why-do-we-need-vector-search" class="level3">
<h3 class="anchored" data-anchor-id="why-do-we-need-vector-search">Why do we need vector search?</h3>
<p>I built Meepo out of frustration with existing search engines. I needed a fork, so naturally I tried to search for ‚Äúfork‚Äù on my favourite online store, but the result contained only 4 items ‚Äì none of which resemble a fork at all!</p>
<p><img src="https://wasimlorgat.com/posts/images/normal-fork.png" class="img-fluid"></p>
<p>It turns out, I had to search ‚Äúcutlery‚Äù instead, because that‚Äôs how the items happen to be tagged in the store‚Äôs catalogue.</p>
<p>On the other hand, here are the first few results with Meepo. So many forks!</p>
<p><img src="https://wasimlorgat.com/posts/images/vector-fork.png" class="img-fluid"></p>
<p><strong>Why the difference?</strong></p>
<p>Whereas conventional search engines work by matching the text in your query with labels attached to each image, modern semantic search engines leverage neural networks for a deeper understanding of what‚Äôs represented by the pixels in the image and the text in their labels.</p>
<p>This means that queries like ‚Äúfork‚Äù work, regardless of how each item is labelled. It also means that you can get far more creative with your queries, including colors, textures, patterns, and more!</p>
<p>For example, here is the top search result for ‚Äúfluffy striped salmon pillow‚Äù:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/fluffy-striped-salmon-pillow.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="200"></p>
</figure>
</div>
<p>Incredible! And even more incredible is how easy it is to build your own such vector search engine thanks to a powerful and open-source technology: Contrastive Language-Image Pretraining (CLIP).</p>
</section>
<section id="whats-clip" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="whats-clip">What‚Äôs CLIP?</h3>
<p>Contrastive Language-Image Pretraining (CLIP) is a technique for training neural networks with state-of-the-art zero-shot performance on a variety of tasks using mixed image and text data.<sup>1</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;While CLIP has been dethroned several times in the last two years (most recently by <a href="http://arxiv.org/abs/2301.12597">BLIP-2</a>), it is still notable for introducing a step change improvement in the power of zero-shot multimodal techniques.</p></div></div><p>Zero-shot learning refers to a machine learning approach where a model is trained on one dataset and then tested on a completely different dataset. For instance, CLIP was trained on a broad dataset of captioned images from the web. However, in the next section we will apply it to a dataset featuring only cats and dogs. Meepo similarly applies CLIP to images of homeware and fashion items.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/clip-training.png" class="img-fluid figure-img" width="600"></p>
<figcaption>A visualization of the contrastive language-image pretraining approach. Source: <a href="https://openai.com/blog/clip/">CLIP: Connecting Text and Images</a> by OpenAI.</figcaption>
</figure>
</div>
<p>The idea is to pretrain a neural network to predict the most relevant text snippet given an image and vice versa.</p>
<p><strong>But the trick is to use a <em>contrastive</em> rather than a predictive objective.</strong></p>
<p>What does that mean?</p>
<p>A predictive objective takes an input image and tries to predict its corresponding text snippet.</p>
<p>On the other hand, a contrastive objective predicts a vector for each image and another vector for each text snippet; these vectors are called <em>embeddings</em>. It does so in such a way that corresponding image and text vectors are more <em>similar</em> (according to some chosen similarity function) and non-corresponding image and text vectors are less similar.</p>
<p>OpenAI found that a contrastive objective reached the same zero-shot ImageNet accuracy as the predictive objective while using 4x fewer training examples!</p>
</section>
<section id="convirt-the-little-known-medical-roots-of-clip" class="level3">
<h3 class="anchored" data-anchor-id="convirt-the-little-known-medical-roots-of-clip">ConVIRT: The little-known medical roots of CLIP</h3>
<p>Interestingly, the technique described above was originally introduced as ConVIRT <a href="https://arxiv.org/abs/2010.00747">(Zhang et al.&nbsp;2020)</a>, which demonstrated the approach on 217k medical image-text pairs (~2000x fewer than CLIP).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/meepo-convirt-examples.png" class="img-fluid figure-img" width="400"></p>
<figcaption>X-ray images with naturally occurring paired descriptions from doctor‚Äôs reports. Source: Figure 1 of Zhang et al., 2020</figcaption>
</figure>
</div>
<p>Despite being acknowledged in the <a href="https://arxiv.org/abs/2103.00020">CLIP paper</a>, I hadn‚Äôt heard of ConVIRT until I read the CLIP paper myself:</p>
<blockquote class="blockquote">
<p><strong>[‚Ä¶] we create a new dataset of 400 million (image, text) pairs and demonstrate that <span class="hl-yellow">a simplified version of ConVIRT trained from scratch, which we call CLIP</span>, for Contrastive Language-image Pre-training, is an efficient method of learning from natural language supervision.</strong></p>
</blockquote>
<p>As with most machine learning innovations, <a href="https://vicki.substack.com/p/neural-nets-are-just-people-all-the">it all starts with data</a>. High-quality annotations of medical images are expensive to make.</p>
<p><strong>ConVIRT‚Äôs key insight was to mine doctor‚Äôs reports <em>in their natural language format</em> for image-text pairs.</strong></p>
<p>OpenAI‚Äôs later contribution was largely an engineering effort. They scaled ConVIRT up to a 2000x larger dataset‚Äî400 million examples in total! Of course, that itself is a mighty task.</p>
<p>Now that we have some background on CLIP and its impressive zero-shot capabilities, how do we actually use it to create a semantic search engine like Meepo?</p>
</section>
</section>
<section id="part-2-lets-build-a-clip-search-engine-for-the-oxford-pets-dataset" class="level2">
<h2 class="anchored" data-anchor-id="part-2-lets-build-a-clip-search-engine-for-the-oxford-pets-dataset">Part 2: Let‚Äôs build a CLIP search engine for the Oxford Pets dataset</h2>
<p>In this section, we‚Äôll build our own CLIP-based semantic search engine on the Oxford Pets dataset.</p>
<p>I chose the Oxford Pets dataset since it‚Äôs a good size and complexity to demonstrate the power of CLIP, but I urge you to try this out on your own dataset too.</p>
<p>We‚Äôll do this in two steps:</p>
<ul>
<li>First, we‚Äôll use CLIP as a convenient zero-shot classifier.</li>
<li>Then we‚Äôll show how to use the same underlying functions for text-to-image search.</li>
</ul>
<p>By the end of the section you will be able to search for queries as obscure as ‚Äúa fluffy pink cat on a tv‚Äù ‚Äì and it‚Äôll work!</p>
<section id="the-oxford-pets-dataset" class="level3">
<h3 class="anchored" data-anchor-id="the-oxford-pets-dataset">The Oxford Pets dataset</h3>
<p>First install these required libraries:</p>
<ul>
<li><a href="https://huggingface.co/docs/datasets/index">HuggingFace Datasets</a>: easily access and share datasets for a variety of machine learning tasks.</li>
<li><a href="https://huggingface.co/docs/transformers/index">HuggingFace Transformers</a>: easily download, train, and use state-of-the-art pretrained neural networks.</li>
</ul>
<div id="9b63e71e" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install datasets transformers</span></code></pre></div>
</div>
<p>Then load the <a href="https://huggingface.co/datasets/pcuenq/oxford-pets">Oxford Pets</a> dataset ‚Äì thanks to <a href="https://twitter.com/pcuenq">Pedro Cuenqa</a> for uploading it:</p>
<div id="5836b0e4" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb2-2"></span>
<span id="cb2-3">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pcuenq/oxford-pets"</span>)</span></code></pre></div>
</div>
<p>One of the most important rules of machine learning is to always look at the data. This is quite easy with images, since we can just show the image.</p>
<p>Let‚Äôs define a helper function to show thumbnails of an image:</p>
<div id="ddfa65b5" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> thumbnail(image, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> image.resize(np.array(image.size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>scale)</span></code></pre></div>
</div>
<p>Here‚Äôs an example of a cat:</p>
<div id="c7a5e0e6" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">cat_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb4-2">cat_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cat_row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]</span>
<span id="cb4-3">thumbnail(cat_image)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>‚Ä¶ and here‚Äôs an example of a dog:</p>
<div id="aba2e5af" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">dog_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb5-2">dog_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dog_row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]</span>
<span id="cb5-3">thumbnail(dog_image)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="using-clip-for-zero-shot-classification" class="level3">
<h3 class="anchored" data-anchor-id="using-clip-for-zero-shot-classification">Using CLIP for zero-shot classification</h3>
<p>Now that we have a dataset, we can load the CLIP processor and model. The concept of having a separate <em>processor</em> and <em>model</em> is central to the HuggingFace Transformers library, since it allows us to use 174 state-of-the-art models (as of writing this article) with a very similar API.</p>
<p>Note that it might take a minute to download the pretrained weights:</p>
<div id="e16641de" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CLIPProcessor, CLIPModel</span>
<span id="cb6-2"></span>
<span id="cb6-3">processor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPProcessor.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"openai/clip-vit-base-patch32"</span>)</span>
<span id="cb6-4">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"openai/clip-vit-base-patch32"</span>)</span></code></pre></div>
</div>
<p>The <code>CLIPProcessor</code> prepares the inputs for the <code>CLIPModel</code> which can then be used to obtain embedding vectors. Let‚Äôs create a function to embed an image by first passing it through the processor and then into the model:</p>
<div id="4279de40" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> embed_image(images):</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(images, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>): images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [images]</span>
<span id="cb7-5">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor(images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>images, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model.get_image_features(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>inputs)</span></code></pre></div>
</div>
<p>Test that it works:</p>
<div id="3aa69621" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [cat_image, dog_image]</span>
<span id="cb8-2">image_embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embed_image(images)</span>
<span id="cb8-3">image_embs.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([2, 512])</code></pre>
</div>
</div>
<p>You can also pass text to the <code>CLIPProcessor</code>. Let‚Äôs create a similar function to embed text inputs:</p>
<div id="ba2b888e" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> embed_text(text):</span>
<span id="cb10-2">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor(text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model.get_text_features(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>inputs)</span></code></pre></div>
</div>
<div id="ef989e56" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">text_embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embed_text([<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"a photo of a </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cls <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dog"</span>]])</span>
<span id="cb11-2">text_embs.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([2, 512])</code></pre>
</div>
</div>
<p>We can now use embeddings for zero-shot classification by using text inputs that represent the different classes, and then calculating the <em>cosine similarity</em> between image embeddings and text embeddings.</p>
<p>Cosine similarity is calculated by taking the dot product of normalized vectors:</p>
<div id="b54a14a7" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> normalize(a): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a.norm(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cosine_sim(a, b): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> normalize(a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> normalize(b).T</span></code></pre></div>
</div>
<div id="ff186e5d" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">cosine_sim(image_embs, text_embs)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[0.2639, 0.2127],
        [0.1962, 0.2553]])</code></pre>
</div>
</div>
<p>Note how the similarity between the cat image and the text ‚Äúa photo of a cat‚Äù (0.2639) is higher than the similarity between the cat image and the text ‚Äúa photo of a dog‚Äù (0.2127), and similarly for the dog image in the next row of the tensor.</p>
<p>We can convert these similarities to probabilities by using the model‚Äôs <code>logit_scale</code> parameter followed by the <code>softmax</code> method:</p>
<div id="a18a6958" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> logits(a, b): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model.logit_scale.exp() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cosine_sim(a, b)</span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> probs(a, b): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> logits(a, b).softmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<div id="0e0396db" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">probs(text_embs, image_embs)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[0.9940, 0.0027],
        [0.0060, 0.9973]], grad_fn=&lt;SoftmaxBackward0&gt;)</code></pre>
</div>
</div>
<p>We see a probability of 0.994 that the image of a cat is in fact a cat, and a probability of 0.997 that the image of a dog is in fact a dog. Pretty good!</p>
<p>Since this is a zero-shot classifier, we can very easily generalize it to arbitrary classes! Let‚Äôs make a convenient wrapper to do exactly that:</p>
<div id="363d3ef8" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> classify(image, classes, template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a photo of a </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>):</span>
<span id="cb19-2">    image_embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embed_image(image)</span>
<span id="cb19-3">    text_embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embed_text([template.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(o) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> classes])</span>
<span id="cb19-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> probs(text_embs, image_embs)</span></code></pre></div>
</div>
<p>To use this, simply pass in a list of classes. You can also customize the <code>template</code>, which can improve the classification accuracy.</p>
<p>Here‚Äôs how we can classify the breed of a cat:</p>
<div id="4aea6aff" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">cat_breeds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>({row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dog"</span>]})</span>
<span id="cb20-2">scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(cat_image, cat_breeds, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a photo of a </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> cat"</span>)</span>
<span id="cb20-3">scores</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[1.2116e-05],
        [5.4131e-06],
        [4.6950e-02],
        [1.9504e-06],
        [2.1754e-02],
        [1.7998e-04],
        [9.0918e-04],
        [9.1228e-01],
        [1.7194e-02],
        [4.6431e-05],
        [5.8636e-04],
        [7.8781e-05]], grad_fn=&lt;SoftmaxBackward0&gt;)</code></pre>
</div>
</div>
<div id="41ED0033-6570-4F42-A0D8-97BB21DD74DD" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.argmax(scores)</span>
<span id="cb22-2">cat_breeds[idx], scores[idx].item()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>('Persian', 0.9122824668884277)</code></pre>
</div>
</div>
<p>‚Ä¶ and here‚Äôs how we can classify the color of any animal:</p>
<div id="e457d936" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brown"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pink"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>]</span>
<span id="cb24-2">scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(cat_image, classes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a photo of a </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> animal"</span>)</span>
<span id="cb24-3">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.argmax(scores)</span>
<span id="cb24-4">classes[idx], scores[idx].item()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>('white', 0.8672362565994263)</code></pre>
</div>
</div>
<p>It works ‚Äì and it‚Äôs super convenient too!</p>
</section>
<section id="using-clip-for-text-to-image-search" class="level3">
<h3 class="anchored" data-anchor-id="using-clip-for-text-to-image-search">Using CLIP for text-to-image search</h3>
<p>Using CLIP for search is not too different from using it for zero-shot classification. In fact, search is even simpler! We don‚Äôt need to calculate probabilities since we ultimately only care about the order of items:</p>
<div id="65888292" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> search(image_embs, query_embs):</span>
<span id="cb26-2">    sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cosine_sim(image_embs, query_embs).flatten()</span>
<span id="cb26-3">    indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sims.argsort(descending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb26-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> indices, sims[indices]</span></code></pre></div>
</div>
<div id="30E00922-FA29-481A-B0A6-3A363B0BA41D" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">indices, sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search(image_embs, embed_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a photo of a cat"</span>))</span>
<span id="cb27-2">indices, sims</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([0, 1]), tensor([0.2639, 0.1962]))</code></pre>
</div>
</div>
<div id="2bf0ad46" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> indices: display(thumbnail(images[i]))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-23-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Let‚Äôs try that with a bigger dataset and some more interesting queries:</p>
<p>Let‚Äôs embed all of the images. Since this took quite a while on my laptop (19 minutes), it‚Äôs convenient to cache the result to disk so that we don‚Äôt slow down iteration in our notebook:</p>
<div id="894b2f24" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb30-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.notebook <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
</div>
<div id="192d7de5" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">all_image_embs_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"oxford_pets_embeddings.npy"</span>)</span>
<span id="cb31-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> all_image_embs_path.exists():</span>
<span id="cb31-3">    all_image_embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.load(all_image_embs_path))</span>
<span id="cb31-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb31-5">    all_image_embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([embed_image(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>])])</span>
<span id="cb31-6">    np.save(all_image_embs_path, np.array(all_image_embs))</span></code></pre></div>
</div>
<div id="e29922ff" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">all_image_embs.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([7390, 512])</code></pre>
</div>
</div>
<div id="cf611ac2" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> search_and_display(image_embs, query_embs, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb34-2">    indices, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search(image_embs, query_embs)</span>
<span id="cb34-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> indices[:k]:</span>
<span id="cb34-4">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>][i.item()][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]</span>
<span id="cb34-5">        display(thumbnail(image))</span></code></pre></div>
</div>
<div id="bf2ca868" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">search_and_display(all_image_embs, embed_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a photo of a white puppey on the grass"</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-28-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-28-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-28-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Amazing! I wonder how obscure we can get?</p>
<div id="7D0912E0-9255-44FA-9120-4AADEA703426" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">search_and_display(all_image_embs, embed_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a photo of a fluffy pink cat on a tv"</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-29-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-29-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-29-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>It always surprises me how well this works! ü§Ø</p>
<p>And once again, it‚Äôs super flexible. For example, all we need to change in order to use an image query is to pass the image‚Äôs embeddings instead of text embeddings!</p>
<p>Let‚Äôs find the most similar images to our fluffy white persian cat from earlier:</p>
<div id="772F80F2-E221-4FEF-B115-FF45BFBA9EC4" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">search_and_display(all_image_embs, embed_image(cat_image))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-30-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-30-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/image-vector-search_files/figure-html/cell-30-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now that we have a working CLIP-based vector search engine, how do we share it with the world?</p>
</section>
</section>
<section id="part-3-tips-for-deploying-your-search-engine" class="level2">
<h2 class="anchored" data-anchor-id="part-3-tips-for-deploying-your-search-engine">Part 3: Tips for deploying your search engine</h2>
<p>In this section, I‚Äôll share a few tips that you might find helpful in deploying your own search engine based on my experience with Meepo.</p>
<section id="how-meepo-works" class="level3">
<h3 class="anchored" data-anchor-id="how-meepo-works">How Meepo works</h3>
<p>Meepo consists of the following two sub-systems:</p>
<ol type="1">
<li><strong>Data pipeline:</strong> A set of scripts responsible for maintaining the data that powers the search engine. This includes scraping, running images through CLIP, and maintaining the data storage components (detailed further below).</li>
<li><strong>Web app:</strong> A simple search form in front of a CLIP-based search engine (as described in part 2). The app reads from the application database and vector search index (written to by the data pipeline), and renders HTML/CSS to the user.</li>
</ol>
<p><img src="https://wasimlorgat.com/posts/images/vector-search-engine.png" class="img-fluid"></p>
<p>Data storage consists of two components that are updated by the data pipeline and then read from by the web app:</p>
<ol type="1">
<li><strong>Application database:</strong> A typical relational database that contains all of the products in the search catalogue, along with associated metadata.</li>
<li><strong>Vector search index:</strong> An index for fast approximate nearest neighbour vector search. I used <a href="https://github.com/facebookresearch/faiss">faiss</a>, although there are other options like <a href="https://github.com/nmslib/hnswlib">hnswlib</a>, as well as more full-featured vector search databases like <a href="https://milvus.io/">Milvus</a>, <a href="https://www.pinecone.io/">Pinecone</a>, <a href="https://qdrant.tech/">Qdrant</a>, and <a href="https://weaviate.io/">Weaviate</a>.</li>
</ol>
<section id="tech-stack" class="level4">
<h4 class="anchored" data-anchor-id="tech-stack">Tech stack</h4>
<p>As for the specific tech choices, here‚Äôs the full stack powering Meepo:</p>
<ul>
<li>Contrastive language-image pretraining: the deep learning method powering Meepo‚Äôs search.</li>
<li><a href="https://github.com/facebookresearch/faiss">Faiss</a>: a fast approximate nearest neighbour vector search index.</li>
<li><a href="https://docs.conda.io/en/latest/">Conda</a>: a Python package management system.</li>
<li><a href="http://nbdev.fast.ai/">nbdev</a>: a platform for developing software using <a href="https://jupyter.org/">Jupyter</a> notebooks.</li>
<li><a href="https://tailwindcss.com/">Tailwind CSS</a>: a simpler CSS framework.</li>
<li><a href="https://daisyui.com/">DaisyUI</a>: a component library built on Tailwind CSS.</li>
<li><a href="https://www.sqlite.org/">SQLite</a>: a light but powerful database engine.</li>
<li><a href="https://www.djangoproject.com/">Django</a>: a battle-tested Python web framework.</li>
<li><a href="">Gunicorn</a>: a Python HTTP server that lets us serve our Django application.</li>
<li><a href="https://www.nginx.com/">Nginx</a>: a powerful and customizeable web server.</li>
<li><a href="https://cron.com/">Cron</a>: a job scheduler built into Unix operating systems.</li>
<li><a href="https://www.linode.com/">Linode</a>: a cloud hosting provider.</li>
</ul>
</section>
<section id="infrastructure" class="level4">
<h4 class="anchored" data-anchor-id="infrastructure">Infrastructure</h4>
<p>I developed and tested an MVP locally on a small subset of data. Once I was happy with that, I deployed it to a Linode 4 GB Shared CPU VPS (2 CPUs, 4GB RAM, 80GB storage) costing $24 per month, and subscribed to Linode‚Äôs backup service for an additional $5 per month.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why use a Virtual Private Server(VPS) instead of a modern platform as a service option?
</div>
</div>
<div class="callout-body-container callout-body">
<p>Most people underestimate how much traffic you can serve from a single low cost VPS!</p>
<p><a href="https://twitter.com/levelsio">Pieter Levels</a>, a well-known solopreneur, ran more than 40 of his websites serving over 250 million requests per month <a href="https://twitter.com/levelsio/status/1641728236617887744">from a single VPS</a>.</p>
<p><a href="https://memex.marginalia.nu/">Marginalia</a>, an indie search engine that focuses on non-commercial content, casually handled the front page of Hackernews <a href="https://news.ycombinator.com/item?id=35614187">with a single server worth ~$5k of commercial hardware</a> in their living room.</p>
<p>My good friend <a href="https://twitter.com/ashtonshudson">Ashton Hudson</a> took the same approach with <a href="https://www.servaltracker.com/">Serval</a>, a price tracker for South Africa‚Äôs largest online store, which serves 3000 daily active users and stores 7 million time series data points on <a href="https://twitter.com/ashtonshudson/status/1609621491481460737">low cost servers at a total of ~$45 per month</a>.</p>
</div>
</div>
<p>I totally overestimated how much effort it would take to setup a VPS. It wasn‚Äôt that bad and took a few hours in the end. Here‚Äôs how I went about it. Note that these steps only need to be carried out once per server:</p>
<ol type="1">
<li><strong>Rent a VPS:</strong> There are plenty of options available. I chose Linode for no particular reason.</li>
<li><strong>Setup your VPS:</strong> This includes updating packages, setting the timezone and hostname, creating a limited user, and tightening SSH settings. I followed <a href="https://www.linode.com/docs/products/compute/compute-instances/guides/set-up-and-secure/">this Linode guide</a>.</li>
<li><strong>Setup nginx:</strong> I followed <a href="https://realpython.com/django-nginx-gunicorn">this Real Python guide</a>.</li>
</ol>
<p>Once your server is setup, you‚Äôll need to follow a few more setups for your app (and each future app you create):</p>
<ol type="1">
<li><strong>Setup Gunicorn:</strong> I followed <a href="https://realpython.com/django-nginx-gunicorn">the same Real Python guide</a> from above.</li>
<li><strong>Setup your domain name:</strong> Buy a domain name and configure your VPS to use it. I searched for the cheapest name containing ‚Äúmeepo‚Äù and was lucky to score <a href="https://meepo.shop">meepo.shop</a> at $2!</li>
<li><strong>Deploy your web app:</strong> I followed <a href="https://docs.djangoproject.com/en/4.2/howto/deployment/">Django‚Äôs official deployment guide</a>.</li>
<li><strong>Deploy your pipeline:</strong> I kept it simple and added a <a href="https://man7.org/linux/man-pages/man5/crontab.5.html">crontab</a> entry to a single shell script.</li>
</ol>
</section>
</section>
<section id="choosing-boring-tech" class="level3">
<h3 class="anchored" data-anchor-id="choosing-boring-tech">Choosing boring tech</h3>
<p>You might have noticed that I chose a ‚Äúboring‚Äù tech stack. I believe that <a href="https://boringtechnology.club/">boring tech</a> is a key part of what allowed me to ship Meepo so quickly. Let me explain.</p>
<section id="its-boring-because-it-works" class="level4">
<h4 class="anchored" data-anchor-id="its-boring-because-it-works">It‚Äôs boring because it works</h4>
<p>It‚Äôs been around for decades. If that‚Äôs the case, and it‚Äôs still widely used, then <em>it probably works</em>! It might not be the most elegant solution, but it gets the job done. Software that‚Äôs been maintained for a long time is software that‚Äôs been hardened against many thousands of obscure edge-cases that users like you and I no longer have to worry about.</p>
<p>For example, Meepo is a Django application, and Django is 20 years old. That‚Äôs 20 years of incremental improvements and bug fixes resulting in a truly robust piece of software.</p>
</section>
<section id="innovate-on-your-process-not-only-your-tech" class="level4">
<h4 class="anchored" data-anchor-id="innovate-on-your-process-not-only-your-tech">Innovate on your process, not only your tech</h4>
<p>Developers typically enjoy learning new tools. That‚Äôs a good thing, but it also means that we‚Äôre biased to choosing new tools even when they aren‚Äôt necessarily improvements over the status quo.</p>
<p>Instead of focusing on learning a new tool, try focusing on mastering tools you already know, and developing excellent decision-making skills on top of those tools with a ruthless focus on shipping quickly.</p>
<p>For me, this meant using Django instead of something like FastAPI, and using a simple Linux VPS instead of a more modern platform as a service option. But this is different for everyone and depends on each person‚Äôs individual experience.</p>
</section>
<section id="deviating-from-what-works" class="level4">
<h4 class="anchored" data-anchor-id="deviating-from-what-works">Deviating from what works</h4>
<p>Of course, absolute rules are rarely a good idea in any domain as complex as software. There are definitely cases where less boring tech can be a good idea ‚Äì I try to have a very specific reason before deviating from my favorite boring tools.</p>
<p>For example, I developed Meepo entirely in Jupyter notebooks. It sounds crazy, I know! But there‚Äôs something about <a href="https://nbdev.fast.ai/">notebook-driven development</a> that I can‚Äôt quite shake. It makes programming feel like a game. There‚Äôs constant feedback, very quick iteration cycles, and everything is within reach: code, rich docs, and tests all in one place. In fact, the second part of this post was based on the same notebooks that run Meepo.</p>
</section>
</section>
<section id="being-a-responsible-digital-citizen" class="level3">
<h3 class="anchored" data-anchor-id="being-a-responsible-digital-citizen">Being a responsible digital citizen</h3>
<p>If I‚Äôm scraping a website, I‚Äôm most likely not the website‚Äôs intended audience, so I try very hard not to negatively impact the user experience of their intended audience.</p>
<p>Legal concerns around web scraping are pretty vague. However, as long as you provide value to the underlying service, they probably won‚Äôt mind you scraping them. For example, nobody cares that Google scrapes their sites because they provide traffic via search. Similarly, fashion stores that Meepo scrapes probably won‚Äôt mind the extra traffic it brings them.</p>
<p>Here are some more detailed tips for scraping responsibly:</p>
<ul>
<li>Check how big the viewership of the website is. I would personally be hesitant to scrape a small website and would probably prefer to email the owner directly.</li>
<li>Identify yourself with contact information via the user agent header ‚Äì don‚Äôt try to fake being a human! A simple pattern you can use is&nbsp;<code>your.website.com/x.y (your@email.com)</code>&nbsp;where&nbsp;<code>x.y</code>&nbsp;is your scraper‚Äôs version number.</li>
<li>Be considerate about their resource usage, especially since you aren‚Äôt their intended audience.</li>
<li>Do the bulk of your requests during off-peak times depending on the local timezone of their audience.</li>
<li>Sleep between requests as much as you possibly can. Add small random amounts as well to reduce the likelihood of overlapping with other scheduled scrapers and bots, thus reducing peak load.</li>
<li>Use compression when scraping plain text or JSON to minimise their outgoing traffic. It doesn‚Äôt work nearly as well for images so it‚Äôs probably best to not compress them to avoid extra CPU usage on their servers.</li>
</ul>
</section>
</section>
<section id="your-turn" class="level2">
<h2 class="anchored" data-anchor-id="your-turn">Your turn</h2>
<p>Why not have a go at it yourself? üòÑ Dive into <a href="https://github.com/seeM/blog/blob/main/posts/image-vector-search.ipynb">the accompanying notebook</a> for this post, give it a try with your own dataset, deploy the result, and share what you create!</p>
<p><strong>If you found this enjoyable, consider giving it a thumbs up below, commenting, and following me at <a href="https://twitter.com/wasimlorgat"><span class="citation" data-cites="wasimlorgat">@wasimlorgat</span> on Twitter</a>. The positive feedback really helps me get a sense of what readers find valuable!</strong></p>
<hr>
<p><em>Many thanks to <a href="https://kurianbenoy.com/">Kurian Benoy</a>, <a href="https://www.fast.ai/">Jeremy Howard</a>, <a href="https://twitter.com/pcuenq">Pedro Cuenca</a>, and <a href="https://forbo7.github.io/">Salman Naqvi</a>, for their kind and thoughtful comments on various versions of this post.</em></p>


</section>


 ]]></description>
  <category>tutorial</category>
  <guid>https://wasimlorgat.com/posts/image-vector-search.html</guid>
  <pubDate>Tue, 23 May 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Write, document, test and distribute Python packages with nbdev &amp; Quarto</title>
  <link>https://wasimlorgat.com/posts/jupytercon-2023.html</link>
  <description><![CDATA[ 




<p>I attended <a href="https://www.jupytercon.com/">JupyterCon 2023</a> in Paris two weeks ago. On Thursday, <a href="https://hamel.dev/">Hamel Husain</a>, myself, and <a href="https://www.linkedin.com/in/jjallaire">J. J. Allaire</a> (as a teaching assistant) presented a two and a half hour tutorial on Writing, Documenting, Testing, and Distributing Python Packages with <a href="https://nbdev.fast.ai/">nbdev</a> and <a href="https://quarto.org/">Quarto</a>.</p>
<p>I think it went well! The room was full and attendees engaged with great questions.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/jupytercon-2023-tutorial.png" class="shadow-sm border preview-image img-fluid figure-img"></p>
<figcaption>Screenshot of the <a href="https://fastai.github.io/jupytercon-2023/">tutorial website</a> <a href="../tils/using-shot-scraper.html">taken with <code>shot-scraper</code></a>.</figcaption>
</figure>
</div>
<p>Hamel opened by describing the roots of nbdev‚Äôs programming paradigm: a combination of <em>literate programming</em> (<a href="https://en.wikipedia.org/wiki/Literate_programming">introduced by Donald Knuth</a>) and <em>exploratory programming</em> (<a href="https://www.youtube.com/watch?v=PUv66718DII">beautifully demonstrated by Bret Victor</a>) made possible by <a href="https://jupyter.org/">Jupyter</a> notebooks. He then took us through both basic and advanced usage of Quarto ‚Äì the publishing platform that powers nbdev‚Äôs documentation generation.</p>
<p>I followed with a demonstration of my approach to notebook-driven development by live coding the now classic nbdev example: a library for interacting with playing cards based on <a href="https://greenteapress.com/thinkpython2/html/thinkpython2019.html">Chapter 18 of Allen B. Downey‚Äôs Think Python</a>. I tried to focus on the thinking process and how it differs from more conventional programming paradigms, rather than focusing on the mechanics of how nbdev works since that is so readily available online.</p>
<p>My demonstration was largely based on the <a href="https://nbdev.fast.ai/tutorials/tutorial.html">official written nbdev tutorial</a> and <a href="https://nbdev.fast.ai/tutorials/best_practices.html">best practices post</a>. I also used the tutorial as an opportunity to refine these docs. The biggest refinement was that I now recommend JupyterLab instead of the classic notebook. There are two main reasons for this:</p>
<ul>
<li><p>Lab has a growing extension ecosystem:</p>
<ul>
<li><p>I can‚Äôt live without the wonderful <a href="https://github.com/quarto-dev/quarto/tree/main/apps/jupyterlab"><code>jupyterlab-quarto</code></a>. It renders Quarto markdown including frontmatter, callouts, and fenced divs which greatly improves the authoring experience.</p></li>
<li><p>There is interesting work being done on LLM-related extensions like <a href="https://github.com/jupyterlab/jupyter-ai"><code>jupyter-ai</code></a> which adds an LLM chat interface to the sidebar.</p></li>
</ul></li>
<li><p><a href="https://github.com/jupyterlab/jupyterlab/releases/tag/v4.0.0">Lab 4.0.0 was released!</a> It comes with significantly better performance among a ton of other improvements. Most notably for me is a built-in implementation of classic‚Äôs <a href="https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions/collapsible_headings/readme.html">collapsible headings</a> extension (including the keyboard shortcuts). However, it is worth noting that extensions will need to migrate to version 4 and I‚Äôm keen to see what this process will look like!</p></li>
</ul>
<p>You can also find an outline of the tutorial as well as the slides for Hamel‚Äôs opening section at the tutorial website: <a href="https://fastai.github.io/jupytercon-2023" class="uri">https://fastai.github.io/jupytercon-2023</a>.</p>
<p>By the way, we wrote the tutorial site using Quarto too! Here is the underlying repo: <a href="https://github.com/fastai/jupytercon-2023" class="uri">https://github.com/fastai/jupytercon-2023</a>.</p>
<p>The conference venue was beautiful! On the last day, <a href="https://twitter.com/davidbrochart">David Brochart</a>, <a href="https://hamel.dev/">Hamel Husain</a>, and I took a walk around the <a href="https://www.cite-sciences.fr/en/home">Cit√© des sciences et de l‚Äôindustrie</a> and surrounding area, and David shared some of the fascinating history behind the city.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/david-hamel-wasim-jupytercon-2023.jpeg" class="img-fluid figure-img"></p>
<figcaption><a href="https://twitter.com/davidbrochart">David Brochart</a>, <a href="https://hamel.dev/">Hamel Husain</a>, and myself pictured in front of the <a href="https://philharmoniedeparis.fr/en">Philharmonie de Paris</a> a short walk away from the JupyterCon 2023 conference hall.</figcaption>
</figure>
</div>



 ]]></description>
  <category>talk</category>
  <guid>https://wasimlorgat.com/posts/jupytercon-2023.html</guid>
  <pubDate>Mon, 22 May 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to build your own minimal Jupyter frontend</title>
  <link>https://wasimlorgat.com/posts/how-to-build-your-own-minimal-jupyter-frontend.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/jupiter.png" class="preview-image rounded img-fluid figure-img"></p>
<figcaption>Photo by <a href="https://unsplash.com/@planetvolumes?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Planet Volumes</a> on <a href="https://unsplash.com/photos/awYEQyYdHVE?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></figcaption>
</figure>
</div>
<p>This blog post (and the <a href="https://github.com/seeM/blog/blob/main/posts/jupyter-server-a-whirlwind-tour.ipynb">source notebook</a>) is an executable playground for understanding how to communicate with Jupyter Servers. You can think of it as a barebones Jupyter frontend, since we‚Äôll be implementing the full lifecycle including creating a new notebook, writing and executing code cells, and shutting down the server.</p>
<p>I‚Äôm <a href="https://twitter.com/wasimlorgat/status/1611615676220817415?s=20">building my own native macOS Jupyter frontend</a> and writing about my experience and learnings along the way. In order to do that, I need to be familiar with how Jupyter Servers works.</p>
<p>My approach to learning this was a combination of using Chrome dev tools to inspect network requests in Jupyter Lab, and reading the wonderful Jupyter Server docs (particularly the <a href="https://jupyter-server.readthedocs.io/en/latest/developers/rest-api.html">REST API reference</a>). I‚Äôll include links to the relevant docs in each section below.</p>
<p>Let‚Äôs get started!</p>
<section id="starting-the-server" class="level2">
<h2 class="anchored" data-anchor-id="starting-the-server">Starting the server</h2>
<p>To start, ensure that you‚Äôre running a Jupyter Server in another process (e.g.&nbsp;in a terminal) by entering the following command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jupyter</span> server</span></code></pre></div>
<p>Once the server is running, update the <code>url_with_token</code> variable below to match what‚Äôs displayed in the terminal output. For example, it should output something like this:</p>
<pre><code>[C 2023-01-07 12:03:57.482 ServerApp]

    To access the server, open this file in a browser:
        file:///Users/seem/Library/Jupyter/runtime/jpserver-80287-open.html
    Or copy and paste one of these URLs:
        http://localhost:8889/?token=72b22f0cee26baaa6aed492b6fed5a010d57bd6c0e1adcce
     or http://127.0.0.1:8889/?token=72b22f0cee26baaa6aed492b6fed5a010d57bd6c0e1adcce</code></pre>
<div id="0d703673" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NB: Update this based on your terminal output</span></span>
<span id="cb3-2">url_with_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'http://localhost:8889/?token=e78ceb3114cb10d50f64485b18e3052c66861616166e0bab'</span></span></code></pre></div>
</div>
</section>
<section id="authenticating" class="level2">
<h2 class="anchored" data-anchor-id="authenticating">Authenticating</h2>
<p>First, we‚Äôll do a quick check that there is a server at the defined <code>url</code>. We need to get the URL without the <code>token</code> query parameter:</p>
<div id="ffc380eb" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> urllib.parse <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urlparse</span></code></pre></div>
</div>
<div id="206b48a1" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urlparse(url_with_token)._replace(query<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>).geturl()</span>
<span id="cb5-2">url</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>'http://localhost:8889/'</code></pre>
</div>
</div>
<p>Now we can make the request:</p>
<div id="60a5019c" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span></code></pre></div>
</div>
<div id="49d240b4" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">requests.get(url)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>&lt;Response [200]&gt;</code></pre>
</div>
</div>
<p>A 200 response means that the server processed the request successfully.</p>
<p>Next we need to authenticate. What happens if we try to make a request to an endpoint that requires authentication, for example <code>GET /api/contents</code>?</p>
<div id="d363c9dd" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">requests.get(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/contents'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>&lt;Response [403]&gt;</code></pre>
</div>
</div>
<p>It fails with <code>403 Forbidden</code>.</p>
<p>If we include our token in the <code>Authorization</code> header:</p>
<div id="47341bcd" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urlparse(url_with_token).query.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'='</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-2">headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Authorization'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'token </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>}</span>
<span id="cb12-3">requests.get(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/contents'</span>, headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>headers)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>&lt;Response [200]&gt;</code></pre>
</div>
</div>
<p>‚Ä¶ it works!</p>
<p>Let‚Äôs create a <code>requests.Session</code> so we don‚Äôt have to keep specifying the header:</p>
<div id="c800292c" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">session <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.Session()</span>
<span id="cb14-2">session.headers.update(headers)</span></code></pre></div>
</div>
</section>
<section id="managing-files" class="level2">
<h2 class="anchored" data-anchor-id="managing-files">Managing files</h2>
<p>Jupyter Server lets you manage files via the <a href="https://jupyter-server.readthedocs.io/en/latest/developers/contents.html">Contents API</a>. Browser frontends access this via the <code>/api/contents</code> <a href="https://jupyter-server.readthedocs.io/en/latest/developers/rest-api.html">REST API</a>.</p>
<p>Let‚Äôs use the Contents API to create a file, rename it, and write some contents to it.</p>
<section id="list-the-contents-of-a-directory" class="level3">
<h3 class="anchored" data-anchor-id="list-the-contents-of-a-directory">List the contents of a directory</h3>
<p><code>GET /api/contents/&lt;path&gt;</code> returns the contents of the file or directory at <code>path</code>. You can think of it as <code>ls</code> for Jupyter Server:</p>
<div id="372abec1" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">session.get(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/contents'</span>).json()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>{'name': '',
 'path': '',
 'last_modified': '2023-01-19T05:58:38.693411Z',
 'created': '2023-01-19T05:58:38.693411Z',
 'content': [],
 'format': 'json',
 'mimetype': None,
 'size': None,
 'writable': True,
 'type': 'directory'}</code></pre>
</div>
</div>
<p>Since the directory is currently empty, <code>content</code> is an empty list.</p>
</section>
<section id="create-an-empty-notebook" class="level3">
<h3 class="anchored" data-anchor-id="create-an-empty-notebook">Create an empty notebook</h3>
<p><code>POST /api/contents/&lt;path&gt;</code> creates an empty file in the directory at <code>path</code>. You can specify the <code>type</code> of the file in the request body:</p>
<div id="48a05bd9" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">session.post(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/contents'</span>, json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'notebook'</span>})</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>&lt;Response [201]&gt;</code></pre>
</div>
</div>
<p>The 201 status code means that the request succeeded and a resource was created.</p>
<p>Let‚Äôs confirm that the file exists with <code>GET /api/contents</code>:</p>
<div id="64d4f91c" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">session.get(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/contents'</span>).json()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>{'name': '',
 'path': '',
 'last_modified': '2023-01-19T06:01:01.089699Z',
 'created': '2023-01-19T06:01:01.089699Z',
 'content': [{'name': 'Untitled.ipynb',
   'path': 'Untitled.ipynb',
   'last_modified': '2023-01-19T06:01:01.090600Z',
   'created': '2023-01-19T06:01:01.090600Z',
   'content': None,
   'format': None,
   'mimetype': None,
   'size': 72,
   'writable': True,
   'type': 'notebook'}],
 'format': 'json',
 'mimetype': None,
 'size': None,
 'writable': True,
 'type': 'directory'}</code></pre>
</div>
</div>
<p>The response is a nested dict. The root dict refers to the root directory as before, however, <code>content</code> now contains the newly created notebook named <code>Untitled.ipynb</code>.</p>
<p>We can get the contents of this file using the same method but referring to the file‚Äôs path i.e.&nbsp;<code>GET /api/contents/&lt;path&gt;</code>:</p>
<div id="ade22939" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> session.get(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/contents/Untitled.ipynb'</span>).json()</span>
<span id="cb21-2">data</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{'name': 'Untitled.ipynb',
 'path': 'Untitled.ipynb',
 'last_modified': '2023-01-19T06:01:01.090600Z',
 'created': '2023-01-19T06:01:01.090600Z',
 'content': {'cells': [], 'metadata': {}, 'nbformat': 4, 'nbformat_minor': 5},
 'format': 'json',
 'mimetype': None,
 'size': 72,
 'writable': True,
 'type': 'notebook'}</code></pre>
</div>
</div>
<p>We‚Äôre probably most interested in <code>content</code>, which contains the JSON content of the notebook:</p>
<div id="04591521" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>{'cells': [], 'metadata': {}, 'nbformat': 4, 'nbformat_minor': 5}</code></pre>
</div>
</div>
<p>For now, the notebook only has some metadata, and <code>cells</code> is empty.</p>
</section>
<section id="rename-a-notebook" class="level3">
<h3 class="anchored" data-anchor-id="rename-a-notebook">Rename a notebook</h3>
<p>Our newly created file is still named <code>Untitled.ipynb</code>. Let‚Äôs rename it to <code>sum.ipynb</code> with <code>PATCH /api/contents/&lt;path&gt;</code>:</p>
<div id="4d7a78d2" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">session.patch(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/contents/Untitled.ipynb'</span>, json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'path'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum.ipynb'</span>}).json()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>{'name': 'sum.ipynb',
 'path': 'sum.ipynb',
 'last_modified': '2023-01-19T06:01:01.090600Z',
 'created': '2023-01-19T06:01:01.210202Z',
 'content': None,
 'format': None,
 'mimetype': None,
 'size': 72,
 'writable': True,
 'type': 'notebook'}</code></pre>
</div>
</div>
<p>Confirm that it‚Äôs been renamed. <code>Untitled.ipynb</code> no longer exists:</p>
<div id="a7bd2873" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">session.get(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/contents/Untitled.ipynb'</span>).json()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>{'message': 'No such file or directory: Untitled.ipynb', 'reason': None}</code></pre>
</div>
</div>
<p>‚Ä¶ but <code>sum.ipynb</code> does:</p>
<div id="8dd1d341" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">session.get(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/contents/sum.ipynb'</span>).json()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>{'name': 'sum.ipynb',
 'path': 'sum.ipynb',
 'last_modified': '2023-01-19T06:01:01.090600Z',
 'created': '2023-01-19T06:01:01.210202Z',
 'content': {'cells': [], 'metadata': {}, 'nbformat': 4, 'nbformat_minor': 5},
 'format': 'json',
 'mimetype': None,
 'size': 72,
 'writable': True,
 'type': 'notebook'}</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can also create a file with a specified name using <code>PUT /api/contents/&lt;path&gt;</code>, instead of letting the server find a unique named prefixed with <code>Untitled</code>.</p>
</div>
</div>
</section>
<section id="update-a-notebooks-contents" class="level3">
<h3 class="anchored" data-anchor-id="update-a-notebooks-contents">Update a notebook‚Äôs contents</h3>
<p>Create a cell and append it to existing contents:</p>
<div id="b038cde2" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">cell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb31-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cell_type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'code'</span>,</span>
<span id="cb31-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>,</span>
<span id="cb31-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'metadata'</span>: {},</span>
<span id="cb31-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'source'</span>: [</span>
<span id="cb31-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1 + 1</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb31-7">    ],</span>
<span id="cb31-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'outputs'</span>: [],</span>
<span id="cb31-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'execution_count'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb31-10">}</span>
<span id="cb31-11">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> session.get(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/contents/sum.ipynb'</span>).json()</span>
<span id="cb31-12">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cells'</span>].append(cell)</span></code></pre></div>
</div>
<p>Update the notebook‚Äôs contents using <code>PUT /api/contents/&lt;path&gt;</code>:</p>
<div id="49a22866" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">session.put(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/contents/sum.ipynb'</span>, json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>: data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'notebook'</span>})</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>&lt;Response [200]&gt;</code></pre>
</div>
</div>
<p>Confirm that the notebook‚Äôs been updated. Note that <code>last_modified</code> and <code>content</code> have both updated:</p>
<div id="0d9911bc" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">session.get(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/contents/sum.ipynb'</span>).json()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>{'name': 'sum.ipynb',
 'path': 'sum.ipynb',
 'last_modified': '2023-01-19T06:01:01.348274Z',
 'created': '2023-01-19T06:01:01.348274Z',
 'content': {'cells': [{'cell_type': 'code',
    'execution_count': 0,
    'id': '0',
    'metadata': {'trusted': True},
    'outputs': [],
    'source': '1 + 1\n'}],
  'metadata': {},
  'nbformat': 4,
  'nbformat_minor': 5},
 'format': 'json',
 'mimetype': None,
 'size': 216,
 'writable': True,
 'type': 'notebook'}</code></pre>
</div>
</div>
</section>
</section>
<section id="executing-code" class="level2">
<h2 class="anchored" data-anchor-id="executing-code">Executing code</h2>
<p>Most of the functionality available inside a Jupyter Notebook in your browser is achieved by communicating with the server via websockets. This includes executing code as well as code completion.</p>
<p>Let‚Äôs execute a very simple bit of code on the server.</p>
<section id="start-a-session" class="level3">
<h3 class="anchored" data-anchor-id="start-a-session">Start a session</h3>
<p>List open sessions with <code>GET /api/sessions</code>:</p>
<div id="738af04b" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">session.get(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/sessions'</span>).json()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>[]</code></pre>
</div>
</div>
<p>First we need to choose a kernel specification. Here are the available options on my computer ‚Äì yours will likely differ:</p>
<div id="857b450d" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">session.get(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/kernelspecs'</span>).json()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>{'default': 'python3',
 'kernelspecs': {'dyalog-kernel': {'name': 'dyalog-kernel',
   'spec': {'argv': ['python3',
     '-m',
     'dyalog_kernel',
     '-f',
     '{connection_file}'],
    'env': {},
    'display_name': 'Dyalog APL',
    'language': 'apl',
    'interrupt_mode': 'signal',
    'metadata': {}},
   'resources': {'kernel.js': '/kernelspecs/dyalog-kernel/kernel.js'}},
  'python3': {'name': 'python3',
   'spec': {'argv': ['python',
     '-m',
     'ipykernel_launcher',
     '-f',
     '{connection_file}'],
    'env': {},
    'display_name': 'Python 3 (ipykernel)',
    'language': 'python',
    'interrupt_mode': 'signal',
    'metadata': {'debugger': True}},
   'resources': {'logo-64x64': '/kernelspecs/python3/logo-64x64.png',
    'logo-32x32': '/kernelspecs/python3/logo-32x32.png',
    'logo-svg': '/kernelspecs/python3/logo-svg.svg'}}}}</code></pre>
</div>
</div>
<p>Create a new session with <code>POST /api/sessions</code> with the <code>python3</code> kernelspec:</p>
<div id="87ddef62" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> session.post(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/sessions'</span>, json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kernel'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'python3'</span>}, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum.ipynb'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'path'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum.ipynb'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'notebook'</span>}).json()</span>
<span id="cb40-2">data</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>{'id': '5730d780-fa1f-446e-b8ad-f3e66be9d063',
 'path': 'sum.ipynb',
 'name': 'sum.ipynb',
 'type': 'notebook',
 'kernel': {'id': '760db402-af7f-4559-aa39-5518d2107b14',
  'name': 'python3',
  'last_activity': '2023-01-19T06:01:01.734770Z',
  'execution_state': 'starting',
  'connections': 0},
 'notebook': {'path': 'sum.ipynb', 'name': 'sum.ipynb'}}</code></pre>
</div>
</div>
<p>Now that a session exists, we can connect to a websocket. We‚Äôll need the <code>kernel_id</code> and <code>session_id</code> to do that, so let‚Äôs store them for the next step:</p>
<div id="7cf01323" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">kernel_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kernel'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>]</span>
<span id="cb42-2">session_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>]</span></code></pre></div>
</div>
</section>
<section id="communicate-over-websockets" class="level3">
<h3 class="anchored" data-anchor-id="communicate-over-websockets">Communicate over WebSockets</h3>
<p>First, let‚Äôs craft a message to request an execution ‚Äì you can try changing the value of the <code>code</code> variable below to execute something else:</p>
<div id="52ef9b84" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uuid</span>
<span id="cb43-2"></span>
<span id="cb43-3">code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1 + 1'</span></span>
<span id="cb43-4">code_msg_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(uuid.uuid1())</span>
<span id="cb43-5">code_msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'channel'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shell'</span>,</span>
<span id="cb43-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'silent'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'code'</span>: code},</span>
<span id="cb43-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'header'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'msg_id'</span>: code_msg_id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'msg_type'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'execute_request'</span>},</span>
<span id="cb43-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'metadata'</span>: {},</span>
<span id="cb43-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'parent_header'</span>:{}}</span></code></pre></div>
</div>
<p>Now we can send the message to the server and receive all responses.</p>
<p>We‚Äôll use the <a href="https://websocket-client.readthedocs.io/">websocket-client</a> library. You might also want to consider the <a href="https://websockets.readthedocs.io/en/stable/">websockets</a> library which is asynchronous.</p>
<div id="6e9954fc" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb44-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> contextlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> closing</span>
<span id="cb44-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> websocket <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> create_connection, WebSocketTimeoutException</span>
<span id="cb44-4"></span>
<span id="cb44-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> recv_all(conn):</span>
<span id="cb44-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb44-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>: msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(conn.recv())</span>
<span id="cb44-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> WebSocketTimeoutException: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb44-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  type: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>msg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'msg_type'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:16}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> content: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>msg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb44-10"></span>
<span id="cb44-11">ws_base_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urlparse(url)._replace(scheme<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ws'</span>).geturl()</span>
<span id="cb44-12">ws_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ws_base_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'api/kernels/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kernel_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/channels?session_id=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>session_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb44-13"></span>
<span id="cb44-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> closing(create_connection(ws_url, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>headers, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb44-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Receiving initial messages</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb44-16">    recv_all(conn)</span>
<span id="cb44-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Sending execute_request</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb44-18">    conn.send(json.dumps(code_msg))</span>
<span id="cb44-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Receiving execute_reply</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb44-20">    recv_all(conn)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Receiving initial messages

  type: status           content: {'execution_state': 'busy'}
  type: status           content: {'execution_state': 'idle'}
  type: status           content: {'execution_state': 'idle'}

Sending execute_request

Receiving execute_reply

  type: status           content: {'execution_state': 'busy'}
  type: execute_input    content: {'code': '1 + 1', 'execution_count': 1}
  type: execute_result   content: {'data': {'text/plain': '2'}, 'metadata': {}, 'execution_count': 1}
  type: status           content: {'execution_state': 'idle'}
  type: execute_reply    content: {'status': 'ok', 'execution_count': 1, 'user_expressions': {}, 'payload': []}</code></pre>
</div>
</div>
<p>Yay! We successfully executed code on the server via websockets.</p>
<p>You can learn more about Jupyter‚Äôs messaging specification in the <a href="https://jupyter-client.readthedocs.io/en/stable/messaging.html#messaging-in-jupyter">Jupyter Client docs</a>.</p>
</section>
</section>
<section id="cleanup" class="level2">
<h2 class="anchored" data-anchor-id="cleanup">Cleanup</h2>
<p>It‚Äôs always good practice to cleanup after ourselves, particularly if we share the server with other users.</p>
<p>Let‚Äôs close our session and shutdown the server (although we probably wouldn‚Äôt shut it down if we shared it with others!).</p>
<section id="close-the-session" class="level3">
<h3 class="anchored" data-anchor-id="close-the-session">Close the session</h3>
<p>Since we‚Äôre done with the session, we can close it via <code>DELETE /api/sessions/&lt;session_id&gt;</code>:</p>
<div id="8993bbcf" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">session.delete(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'api/sessions/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>session_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>&lt;Response [204]&gt;</code></pre>
</div>
</div>
</section>
<section id="shutdown-the-server" class="level3">
<h3 class="anchored" data-anchor-id="shutdown-the-server">Shutdown the server</h3>
<p>Finally, shutdown the server via <code>POST /api/shutdown</code>.</p>
<div id="ec857b53" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">session.post(url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'api/shutdown'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>&lt;Response [200]&gt;</code></pre>
</div>
</div>
<p>‚Ä¶ and confirm that it‚Äôs been shutdown correctly:</p>
<div id="15534d8d" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>: session.get(url)</span>
<span id="cb50-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> requests.exceptions.<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ConnectionError</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Server has been successfully shutdown!'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Server has been successfully shutdown!</code></pre>
</div>
</div>
<p>All done!</p>
</section>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next steps</h2>
<p>Congrats! If you followed all the way to the end, you‚Äôve now created a barebones Jupyter frontend. Here are some directions you might consider to take this further:</p>
<ul>
<li>How would you implement other notebook features like code completion?</li>
<li>How does Jupyter‚Äôs trust system work?</li>
<li>How would you implement Jupyter‚Äôs checkpointing system?</li>
<li>Can you redo this in another language?</li>
<li>How would you design and build your own UI on top of this?</li>
</ul>
<p>As for me, my next step is to start translating these into Swift as part of the native macOS Jupyter frontend I‚Äôm building.</p>
<p>Let me know on Twitter or via email if you enjoyed this or if you have any questions!</p>


</section>

 ]]></description>
  <category>tutorial</category>
  <guid>https://wasimlorgat.com/posts/how-to-build-your-own-minimal-jupyter-frontend.html</guid>
  <pubDate>Thu, 12 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Understand the math of diffusion without a PhD</title>
  <link>https://wasimlorgat.com/posts/math-of-diffusion.html</link>
  <description><![CDATA[ 




<p>Check out Lesson 9B: Math of Diffusion of fast.ai‚Äôs <a href="https://www.fast.ai/posts/part2-2022.html">Practical Deep Learning for Coders Part 2, 2022</a> from the wonderful <a href="https://twitter.com/iScienceLuvr">Tanishq</a> and myself if you want to understand the math of diffusion but feel intimidated by the jargon. You‚Äôll learn about the key equations underpinning diffusion models, with no prerequisites beyond high school math.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/mYpjmM7O-30" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<section id="what-youll-learn" class="level2">
<h2 class="anchored" data-anchor-id="what-youll-learn">What you‚Äôll learn</h2>
<p>We walk through the math of diffusion models from the ground up, explaining the insights underlying the key equations in the work of <span class="citation" data-cites="sohl-dickstein_deep_2015">Sohl-Dickstein et al. (2015)</span> that originally discovered diffusion models.</p>
<p>By the end of the lesson you‚Äôll have some understanding of the following key concepts and you‚Äôll know how to recognize and interpret their symbols in research papers: probability density function (pdf), data distribution, forward process, reverse process, Markov process, Gaussian distribution, log likelihood, and evidence lower bound (ELBO).</p>
<p>We also touch on the more recent breakthroughs of <span class="citation" data-cites="ho_denoising_2020">Ho, Jain, and Abbeel (2020)</span> which enabled even simpler and more powerful diffusion models.</p>
<p>You can discuss this lesson, and access links to all notebooks and resources from it, at <a href="https://forums.fast.ai/t/lesson-9b-math-of-diffusion/101077">this forum topic</a>.</p>
</section>
<section id="you-dont-need-a-phd" class="level2">
<h2 class="anchored" data-anchor-id="you-dont-need-a-phd">You don‚Äôt need a PhD</h2>
<p>Here‚Äôs what <a href="https://twitter.com/strickvl">Alex</a>, a student of the course, had to say about the lesson:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/strickvl-on-math-of-diffusion.png" class="rounded border shadow-sm img-fluid quarto-figure quarto-figure-center figure-img" alt="@strickvl (Alex Strick van Linschoten) posts: Just here to say thank you to @ilovescience and @seem for the 9B lecture that dropped this morning. My first reaction on seeing something with the title &quot;the math of diffusion&quot; was to assume that 'oh, that's just something for all the smart people who have PhDs in mathematics on the course, and it'll probably be completely incomprehensible', but of course it's not that at all! I'm not all the way through, but so far I'm just really grateful how you both take things slowly and don't make any assumptions as to the background of your viewers. So thank you!" width="500"></p>
</figure>
</div>
<p>You definitely don‚Äôt need a PhD! In fact, the lesson came about because I felt the same way as Alex. I was frustrated at how difficult I found it to understand the math in diffusion papers.</p>
</section>
<section id="recorded-at-fast.ai-hq" class="level2">
<h2 class="anchored" data-anchor-id="recorded-at-fast.ai-hq">Recorded at fast.ai HQ</h2>
<p>Thanks to nudges from <a href="https://twitter.com/jeremyphoward">Jeremy</a>, we went from an informal conversation, to a talk at the <a href="https://fast.ai">fast.ai</a> unconference, to a recorded lesson ‚Äì in a span of 4 days! Jeremy was kind enough to let us use his equipment and record at the <a href="https://fast.ai">fast.ai</a> HQ.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/recording-math-of-diffusion.png" class="rounded img-fluid quarto-figure quarto-figure-center figure-img" alt="Jeremy and Wasim behind a desk recording lesson 9b &quot;math of diffusion&quot;. Blurred background." width="500"></p>
</figure>
</div>
</section>
<section id="check-out-the-other-lesson-resources" class="level2">
<h2 class="anchored" data-anchor-id="check-out-the-other-lesson-resources">Check out the other lesson resources</h2>
<p>I‚Äôm grateful to be part of this amazing group of people developing <a href="https://fast.ai">fast.ai</a>‚Äôs <a href="https://www.fast.ai/posts/part2-2022.html">From Deep Learning Foundations to Stable Diffusion</a>. Follow the tweet below to find more lesson resources from the team: <a href="https://twitter.com/johnowhitaker">Johno Whitaker</a>, <a href="https://twitter.com/pcuenq">Pedro Cuenca</a>, <a href="https://twitter.com/iScienceLuvr">Tanishq Abraham</a>, and of course <a href="https://twitter.com/jeremyphoward">Jeremy Howard</a>.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
I got a special surprise for you all‚Ä¶<br><br>We just released the first 5.5 hours of our new course "From Deep Learning Foundations to Stable Diffusion", for free!<a href="https://t.co/LiUu9HSflG">https://t.co/LiUu9HSflG</a>
</p>
‚Äî Jeremy Howard (<span class="citation" data-cites="jeremyphoward">(<strong>jeremyphoward?</strong>)</span>) <a href="https://twitter.com/jeremyphoward/status/1582921318348992513?ref_src=twsrc%5Etfw">October 20, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-ho_denoising_2020" class="csl-entry">
Ho, Jonathan, Ajay Jain, and Pieter Abbeel. 2020. <span>‚ÄúDenoising Diffusion Probabilistic Models.‚Äù</span> <span>arXiv</span>. <a href="http://arxiv.org/abs/2006.11239">http://arxiv.org/abs/2006.11239</a>.
</div>
<div id="ref-sohl-dickstein_deep_2015" class="csl-entry">
Sohl-Dickstein, Jascha, Eric A. Weiss, Niru Maheswaranathan, and Surya Ganguli. 2015. <span>‚ÄúDeep Unsupervised Learning Using Nonequilibrium Thermodynamics.‚Äù</span> <span>arXiv</span>. <a href="https://doi.org/10.48550/arXiv.1503.03585">https://doi.org/10.48550/arXiv.1503.03585</a>.
</div>
</div></section></div> ]]></description>
  <category>talk</category>
  <guid>https://wasimlorgat.com/posts/math-of-diffusion.html</guid>
  <pubDate>Sun, 23 Oct 2022 00:00:00 GMT</pubDate>
  <media:content url="https://wasimlorgat.com/posts/images/math-of-diffusion.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>How to write great Jupyter notebooks</title>
  <link>https://wasimlorgat.com/</link>
  <description>How to write great notebooks -- everything we know about writing great notebooks after years of working with nbdev.</description>
  <category>tutorial</category>
  <guid>https://wasimlorgat.com/</guid>
  <pubDate>Mon, 19 Sep 2022 00:00:00 GMT</pubDate>
  <media:content url="https://wasimlorgat.com/posts/images/marie-curie-notebook.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Notes from the fast.ai APL study group</title>
  <link>https://wasimlorgat.com/posts/fastai-array-programming-day-1.html</link>
  <description><![CDATA[ 




<p>Here are my notes for day 1 of the FastAI array programming study group run by Jeremy Howard. Check out <a href="https://forums.fast.ai/t/apl-array-programming/97188">the official thread on the FastAI forum</a> for up-to-date info. Any mistakes are mine - please <a href="https://twitter.com/wasimlorgat">let me know</a> if you spot one.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/juggling.svg" class="img-fluid figure-img" width="200"></p>
<figcaption>Diagram in a juggling notation (<a href="https://en.wikipedia.org/wiki/Juggling_notation">via Wikipedia</a>).</figcaption>
</figure>
</div>
<section id="why-learn-apl" class="level2">
<h2 class="anchored" data-anchor-id="why-learn-apl">Why learn APL?</h2>
<p><em>[Jeremy gave a personal answer here. I‚Äôve paraphrased here and there, and reframed it in the third person, hopefully without changing his intended meaning.]</em></p>
<section id="apl-is-a-way-into-learning-and-teaching-math" class="level3">
<h3 class="anchored" data-anchor-id="apl-is-a-way-into-learning-and-teaching-math">APL is a way into learning and teaching math</h3>
<p>Math is beautiful‚Ä¶ but also very frustrating. It‚Äôs inconsistent, the notation is hard to lookup, and it‚Äôs hard to understand what things mean in a very abstract way when we can‚Äôt experiment with them. APL helps us understand math, thus it helps us teach math.</p>
<p>Jeremy teaches his daughter and her friend math. He found that there were concepts that he found very difficult to teach in traditional abstract ways. In particular, he spent an hour trying to teach them sequences and series with very little progress. He then tried it again with numpy and APL and it clicked much more easily.</p>
</section>
<section id="theres-emmense-beauty-and-power-in-notations" class="level3">
<h3 class="anchored" data-anchor-id="theres-emmense-beauty-and-power-in-notations">There‚Äôs emmense beauty and power in <em>notations</em></h3>
<p>In a previous live coding session, Jeremy talked about regex being a powerful notation. Powerful notations are key to furthering human intellectual development. You see this repeatedly in many domains, particularly math and physics. New ideas take hundreds of years to figure out become far simpler once someone finds the right notation. Notations grant us the ability to manipulate symbols to develop new ideas. Examples include algebra, zero, and even juggling!</p>
<p>APL is a very powerful notation, not just for math but for a range of topics that use similar concepts as math. For example, Aaron Hsu‚Äôs PhD <a href="https://scholarworks.iu.edu/dspace/handle/2022/24749">used APL to build a compiler on the GPU</a>.</p>
</section>
<section id="apl-will-challenge-you-to-think-about-programming-in-new-ways" class="level3">
<h3 class="anchored" data-anchor-id="apl-will-challenge-you-to-think-about-programming-in-new-ways">APL will challenge you to think about programming in new ways</h3>
<p>APL is an independently developed branch of programming with a rich history. APL as a notation has been developed since the 1960s, largely independently to other branches of programming languages. If you never learn about it, you miss out on an entire branch of languages with an incredibly rich history. Jeremy felt that learning array programming did more for his programming skills than any other language he‚Äôs learned.</p>
</section>
</section>
<section id="setting-up-dyalog-in-jupyter" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-dyalog-in-jupyter">Setting up Dyalog in Jupyter</h2>
<section id="install-dyalog" class="level3">
<h3 class="anchored" data-anchor-id="install-dyalog">Install Dyalog</h3>
<p>We‚Äôll use Dyalog, an APL dialect. The first step is to install Dyalog from <a href="https://www.dyalog.com/download-zone.htm">their download page</a>.</p>
</section>
<section id="install-the-dyalog-jupyter-kernel" class="level3">
<h3 class="anchored" data-anchor-id="install-the-dyalog-jupyter-kernel">Install the Dyalog Jupyter kernel</h3>
<p>Although Dyalog comes with an IDE, we‚Äôll use Jupyter notebooks. Make sure that you‚Äôve <a href="https://jupyter.org/install#jupyter-notebook">installed Jupyter notebook</a>. Then install Dyalog Jupyter kernel following <a href="https://github.com/Dyalog/dyalog-jupyter-kernel/wiki/1.-Offline-usage#install-the-dyalog-jupyter-kernel">their installation instructions</a>. Although their instructions say that <a href="https://www.anaconda.com/download/">Anaconda</a> is required, I didn‚Äôt need it on MacOS.</p>
</section>
<section id="create-a-notebook-with-the-dyalog-kernel" class="level3">
<h3 class="anchored" data-anchor-id="create-a-notebook-with-the-dyalog-kernel">Create a notebook with the Dyalog kernel</h3>
<p>Click <em>New</em>, then <em>Dyalog APL</em>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/fastai-array-programming-day-1_files/figure-html/42b866ad-1-image.png" class="img-fluid figure-img"></p>
<figcaption>Create a Dyalog notebook in Jupyter by clicking <i>New</i> then <i>Dyalog APL</i>.|Create a Dyalog notebook in Jupyter by clicking New then Dyalog APL.</figcaption>
</figure>
</div>
<p>You should now be able to write Dyalog directly in your notebook! Try it out:</p>
<div id="756784ba" class="cell">
<pre class="apl cell-code"><code>1 2 3 - 4 5 6</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">¬Ø3 ¬Ø3 ¬Ø3
</span>
</div>
</div>
</section>
<section id="tips-for-a-smoother-dev-environment" class="level3">
<h3 class="anchored" data-anchor-id="tips-for-a-smoother-dev-environment">Tips for a smoother dev environment</h3>
<p>APL uses a variety of glyphs like the <code>¬Ø</code> glyph in the previous output. To make these easier to type in your notebook, you might want to use the <a href="https://abrudz.github.io/lb/apl">APL language bar</a>. It lets you use backtick (`) as a prefix to enter glyphs. For example, <code>&lt;backtick&gt;2</code> is a shortcut for the <code>¬Ø</code> glyph. You can type <code>&lt;backtick&gt;&lt;space&gt;</code> to enter a normal backtick again. It also adds a bar to the top of the page with all of the possible glyphs:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/fastai-array-programming-day-1_files/figure-html/c44c1ebf-2-image.png" class="img-fluid figure-img"></p>
<figcaption>The APL langauge bar: a horizontal list of APL gylphs.</figcaption>
</figure>
</div>
<p>Hovering on a glyph shows a its name and keyboard shortucts:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/fastai-array-programming-day-1_files/figure-html/c44c1ebf-1-image-2.png" class="img-fluid figure-img"></p>
<figcaption>Hovering on the minus sign glyph shows ‚Äònegate minus‚Äô.</figcaption>
</figure>
</div>
</section>
</section>
<section id="a-top-down-learning-plan" class="level2">
<h2 class="anchored" data-anchor-id="a-top-down-learning-plan">A top-down learning plan</h2>
<p>Most tutorials teach APL bottom-up; they go really deep into one topic. FastAI instead strives for top-down teaching. Therefore, we‚Äôll try the approach of learning all of the glyphs first, as simply and quickly as we can. This has the added benefit that the documentation will become useable, since one glyph‚Äôs documentation often contains examples that use other glyphs.</p>
<p>You can find a table of all of the gylphs <a href="https://help.dyalog.com/latest/index.htm#Language/Introduction/Language%20Elements.htm?TocPath=Language%2520Reference%2520Guide%257CSymbols%257C_____1">here</a>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/fastai-array-programming-day-1_files/figure-html/ec994b95-1-image.png" class="img-fluid figure-img"></p>
<figcaption>Tables of APL glyphs: primitive functions, and primitive operators, via <a href="https://help.dyalog.com/latest/index.htm#Language/Introduction/Language%20Elements.htm?TocPath=Language%2520Reference%2520Guide%257CSymbols%257C_____1">Dyalog docs</a>.</figcaption>
</figure>
</div>
<p>A good way to learn new concepts in APL (and in general) is to look at an example, try to predict what it‚Äôll do before you run it, then run it and compare with your prediction. APL documentation is filled with examples which makes this approach even more powerful. The documentation will often include multiple examples as separate elements of an array.</p>
<p>For example, you should read the example for <a href="https://help.dyalog.com/latest/index.htm#Language/Symbols/Minus%20Sign.htm">negate</a>:</p>
<div id="d3eed468" class="cell">
<pre class="apl cell-code"><code>- 3.2 ¬Ø7 0</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">¬Ø3.2 7 0
</span>
</div>
</div>
<p>as three examples:</p>
<div id="80432a06" class="cell">
<pre class="apl cell-code"><code>- 3.2</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">¬Ø3.2
</span>
</div>
</div>
<div id="b7104b05" class="cell">
<pre class="apl cell-code"><code>- ¬Ø7</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">7
</span>
</div>
</div>
<div id="4acfbbea" class="cell">
<pre class="apl cell-code"><code>- 0</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">0
</span>
</div>
</div>
<p>We then went on to learn about the following. My notes are sparse at this point - I highly recommend you check out the video instead!</p>
<ul>
<li><a href="https://help.dyalog.com/latest/index.htm#Language/Symbols/Minus%20Sign.htm">Minus sign</a>; its monadic (negate) and dyadic (minus; subtract) forms.
<ul>
<li>We also use operator names when reading APL expressions. For example, <code>¬Ø2</code> reads ‚Äúnegate 2‚Äù.</li>
</ul></li>
<li><a href="https://help.dyalog.com/latest/index.htm#Language/Introduction/Variables/Arrays.htm">Arrays</a> - we needed to know about arrays to understand minus‚Äô examples.
<ul>
<li>In APL you create an array (like a vector in math and a tensor in deep learning) by adding spaces between elements.</li>
</ul></li>
<li><a href="https://help.dyalog.com/latest/index.htm#Language/Introduction/Functions.htm?TocPath=Programming%2520Reference%2520Guide%257CIntroduction%257C_____5">Functions</a>; monadic versus dyadic functions.
<ul>
<li>Each glyph has two forms: monadic and dyadic. This isn‚Äôt the same as ‚Äúmonads‚Äù in Haskell - it simply means a function that takes one argument. In APL you don‚Äôt write functions like <code>f(x,y,z)</code>. You either write them as <code>f x</code> if there‚Äôs one argument (monadic), or <code>x f y</code> if there are two (dyadic).</li>
</ul></li>
<li><a href="https://help.dyalog.com/latest/index.htm#Language/Symbols/Plus%20Sign.htm">Plus sign</a>; its monadic (conjugate) and dyadic (plus) forms.</li>
<li><a href="https://help.dyalog.com/latest/index.htm#Language/Introduction/Complex%20Numbers.htm?TocPath=Programming%2520Reference%2520Guide%257CIntroduction%257C_____12">Complex numbers</a> - we needed to know about complex numbers to understand conjugate.</li>
</ul>
</section>
<section id="qa" class="level2">
<h2 class="anchored" data-anchor-id="qa">Q&amp;A</h2>
<section id="are-parentheses-used-for-clarifying-expressions-in-apl" class="level3">
<h3 class="anchored" data-anchor-id="are-parentheses-used-for-clarifying-expressions-in-apl">Are parentheses used for clarifying expressions in APL?</h3>
<p>Not really. Since the precedence rules in APL are so simple, people don‚Äôt tend to use parentheses for clarity, but rather only if they‚Äôre absolutely needed.</p>


</section>
</section>

 ]]></description>
  <category>blog</category>
  <guid>https://wasimlorgat.com/posts/fastai-array-programming-day-1.html</guid>
  <pubDate>Tue, 05 Jul 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to build a text editor with Python and curses</title>
  <link>https://wasimlorgat.com/posts/editor.html</link>
  <description><![CDATA[ 




<p><img src="https://wasimlorgat.com/posts/images/editor.svg" class="preview-image img-fluid"></p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>This article was featured in <a href="https://pythonbytes.fm/episodes/show/221/pattern-matching-and-accepting-change-in-python-with-brett-cannon">Episode 221 of the PythonBytes podcast</a> by Michael Kennedy and Brian Okken.</p>
</div>
</div>
</div>
<p>We‚Äôre going to build a command line text editor from scratch in Python. If you‚Äôd like to learn the most out of this, I‚Äôd recommend to code along. When we encounter problems, I‚Äôll try to state them first before suggesting a solution. I encourage you to pause and give yourself about fifteen minutes to try to solve it first. If you‚Äôre still stuck, move along and compare the solution with your own approach. It‚Äôs also totally fine if you simply read through at your leisure.</p>
<p>If you prefer to play around with the final end-to-end solution, check out the <a href="https://github.com/seem/editor">accompanying repo</a>.</p>
<p>One more thing, if you struggle to even get started, reach out to me on <a href="https://twitter.com/wasimlorgat">twitter</a> or via <a href="mailto:mwlorgat@gmail.com">email</a> and I‚Äôll try my best to help.</p>
<p>Let‚Äôs dive right in!</p>
<section id="create-a-curses-application" class="level2">
<h2 class="anchored" data-anchor-id="create-a-curses-application">Create a curses application</h2>
<p>We‚Äôll use the <a href="https://docs.python.org/3/library/curses.html"><code>curses</code></a> library to avoid having to deal with low level issues like efficiently painting to the terminal screen and receiving user input. I‚Äôm going to skim over specifics about <code>curses</code> so we can focus on the editor itself. Please refer to <a href="https://docs.python.org/3/howto/curses.html">the docs</a> if you‚Äôd like to dig a little deeper.</p>
<p>Start with a barebones <code>curses</code> application. Create a file, <code>editor.py</code>, and begin with the following:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> curses</span>
<span id="cb1-2"></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main(stdscr):</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb1-6">        k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stdscr.getkey()</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb1-10">    curses.wrapper(main)</span></code></pre></div>
<p><code>curses.wrapper</code> prepares your terminal and later restores its original state. It then passes an object that represents the terminal screen, called <code>stdscr</code> (short for <em>standard screen</em> like standard in, out, and error).</p>
</section>
<section id="a-way-out" class="level2">
<h2 class="anchored" data-anchor-id="a-way-out">A way out</h2>
<p><em>Problem 1.</em> If you run this, the only way out will be a keyboard interrupt with <code>Ctrl-c</code>. That‚Äôs not great, add a cleaner way out.</p>
<p><em>Solution.</em> <code>stdscr.getkey</code> blocks until a key is pressed, then stores it into the <code>k</code> variable, which is mapped to a <code>sys.exit</code> call to cleanly exit the application.</p>
<p><em>(Comments like <code># ...</code> signal that lines from the previous snippet are unchanged. In this case, <code>import curses</code> remains the first line of <code>editor.py</code>, and the <code>if __name__ == "__main__":</code> block remains at the end of the file.)</em></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb2-3"></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main(stdscr):</span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb2-7">        k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stdscr.getkey()</span>
<span id="cb2-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>:</span>
<span id="cb2-9">            sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>Running the script should land you in a blank page. Then pressing <code>q</code> should get you back out.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> python editor.py</span></code></pre></div>
</section>
<section id="load-and-view-a-file" class="level2">
<h2 class="anchored" data-anchor-id="load-and-view-a-file">Load and view a file</h2>
<p><em>Problem 2.</em> Before we can edit text, we‚Äôll need to be able to display it. Add a way for a user to specify a file. Load that file into memory and display it in the curses window.</p>
<p><em>Solution.</em> Add an <code>ArgumentParser</code> that expects a single <code>filename</code>, reads the file‚Äôs contents to a variable. In the main loop, display each row of the file with <code>stdscr.addstr</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> argparse</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main(stdscr):</span>
<span id="cb4-6">    parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> argparse.ArgumentParser()</span>
<span id="cb4-7">    parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filename"</span>)</span>
<span id="cb4-8">    args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse_args()</span>
<span id="cb4-9"></span>
<span id="cb4-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(args.filename) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb4-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.readlines()</span>
<span id="cb4-12"></span>
<span id="cb4-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb4-14">        stdscr.erase()</span>
<span id="cb4-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>):</span>
<span id="cb4-16">            stdscr.addstr(row, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, line)</span>
<span id="cb4-17"></span>
<span id="cb4-18">        k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stdscr.getkey()</span>
<span id="cb4-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>:</span>
<span id="cb4-20">            sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>The contents of the file are stored in-memory until they‚Äôre ready to be rewritten into a file, hence the name <em>buffer</em>. Text editor buffers have some <a href="https://www.cs.unm.edu/~crowley/papers/sds.pdf">interesting implementations</a>, but we won‚Äôt get into that just yet.</p>
<p>Rerun the application, this time pointing it to a file:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> python editor.py editor.py</span></code></pre></div>
<p>The double <code>editor.py</code> isn‚Äôt a typo. We‚Äôre editing the source of the editor! Which you should now be able to view in your terminal.</p>
</section>
<section id="view-the-buffer-through-a-window" class="level2">
<h2 class="anchored" data-anchor-id="view-the-buffer-through-a-window">View the buffer through a window</h2>
<p><em>Problem 3.</em> Depending on the size of your screen, you may have seen the following error:</p>
<pre class="pytb"><code>_curses.error: addwstr() returned ERR</code></pre>
<p>The application is trying to draw the buffer beyond the length of the screen! In order to fix that, introduce a <em>window</em> with some <em>width</em> and <em>height</em>, and trim the rendered buffer to the width and height of the window.</p>
<p><em>Solution.</em> Add a <code>Window</code> class with <code>n_rows</code> and <code>n_cols</code> attributes. In the main function, instantiate a <code>Window</code> with size <code>(curses.LINES - 1, curses.COLS - 1)</code>; these are constants that hold the number of lines and columns in the current curses window. Then trim the buffer before rendering it in the main loop.</p>
<p><em>(The comment <code># ... def main(stdscr):</code> hints that the text immediately following it belongs to the <code>main</code> function.)</em></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Window:</span>
<span id="cb7-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_rows, n_cols):</span>
<span id="cb7-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_rows</span>
<span id="cb7-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_cols</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb7-9"></span>
<span id="cb7-10">    window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Window(curses.LINES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, curses.COLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-11"></span>
<span id="cb7-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb7-13">        stdscr.erase()</span>
<span id="cb7-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[:window.n_rows]):</span>
<span id="cb7-15">            stdscr.addstr(row, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, line[:window.n_cols])</span>
<span id="cb7-16"></span>
<span id="cb7-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
</section>
<section id="move-the-cursor-through-the-buffer" class="level2">
<h2 class="anchored" data-anchor-id="move-the-cursor-through-the-buffer">Move the cursor through the buffer</h2>
<p><em>Problem 4.</em> The next step towards editing is cursor movement. Introduce a <em>cursor</em>, positioned at a given <em>row</em> and <em>column</em>. For now, initiate the cursor at <code>(0, 0)</code>, then render the <code>stdscr</code> cursor at the current position. Don‚Äôt add any movement functionality just yet.</p>
<p><em>Solution.</em> Create a <code>Cursor</code> class with attributes <code>row</code> and <code>col</code>, both default to 0. Instantiate a <code>Cursor</code> in <code>main</code>, and call <code>stdscr.move</code> to the current cursor position in the main loop:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Cursor:</span>
<span id="cb8-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb8-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row</span>
<span id="cb8-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb8-9"></span>
<span id="cb8-10">    window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Window(curses.LINES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, curses.COLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-11">    cursor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Cursor()</span>
<span id="cb8-12"></span>
<span id="cb8-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb8-14">        stdscr.erase()</span>
<span id="cb8-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[:window.n_rows]):</span>
<span id="cb8-16">            stdscr.addstr(row, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, line[:window.n_cols])</span>
<span id="cb8-17">        stdscr.move(cursor.row, cursor.col)</span>
<span id="cb8-18"></span>
<span id="cb8-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>The cursor should now be displayed at <code>(0, 0)</code>.</p>
<p><em>Problem 5.</em> Next, add cursor movement. Define a method for each direction: <code>up</code>, <code>down</code>, <code>left</code>, and <code>right</code>, each of which update the <code>row</code> or <code>col</code> as required. Then map the arrow keys to these cursor movement methods in the main loop.</p>
<p><em>Solution.</em></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... class Cursor:</span></span>
<span id="cb9-2"></span>
<span id="cb9-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> up(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-5"></span>
<span id="cb9-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> down(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-8"></span>
<span id="cb9-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> left(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-11"></span>
<span id="cb9-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> right(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb9-16"></span>
<span id="cb9-17">        k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stdscr.getkey()</span>
<span id="cb9-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>:</span>
<span id="cb9-19">            sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_UP"</span>:</span>
<span id="cb9-21">            cursor.up()</span>
<span id="cb9-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_DOWN"</span>:</span>
<span id="cb9-23">            cursor.down()</span>
<span id="cb9-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_LEFT"</span>:</span>
<span id="cb9-25">            cursor.left()</span>
<span id="cb9-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_RIGHT"</span>:</span>
<span id="cb9-27">            cursor.right()</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>Rerun the application and give it a spin. It works great! Until‚Ä¶</p>
<p><em>Problem 6.</em> It crashes when you try to move outside of the screen. We should probably restrict the cursor within the buffer.</p>
<p><em>(You may have already solved this in your solution to Problem 5. If so, well done, and feel free to skip ahead!)</em></p>
<p><em>Solution.</em> Update the movement methods to only move if they‚Äôll remain within the buffer. Since cursor movement now depends on buffer properties, we also need to pass the <code>buffer</code> through as an argument:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... class Cursor:</span></span>
<span id="cb10-2"></span>
<span id="cb10-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> up(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-5">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-6"></span>
<span id="cb10-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> down(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>):</span>
<span id="cb10-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb10-9">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-10"></span>
<span id="cb10-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> left(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-14"></span>
<span id="cb10-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> right(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>):</span>
<span id="cb10-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row]):</span>
<span id="cb10-17">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-18"></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb10-20"></span>
<span id="cb10-21">        k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stdscr.getkey()</span>
<span id="cb10-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>:</span>
<span id="cb10-23">            sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_UP"</span>:</span>
<span id="cb10-25">            cursor.up()</span>
<span id="cb10-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_DOWN"</span>:</span>
<span id="cb10-27">            cursor.down(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb10-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_LEFT"</span>:</span>
<span id="cb10-29">            cursor.left()</span>
<span id="cb10-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_RIGHT"</span>:</span>
<span id="cb10-31">            cursor.right(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb10-32"></span>
<span id="cb10-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p><em>Problem 7.</em> Almost there. Cursor movement should now mostly work, except that when moving to a shorter line the cursor will float outside the buffer. Fix that.</p>
<p><em>Solution.</em> Restrict the cursor‚Äôs <code>col</code> to be within the line we move to:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... class Cursor:</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> up(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>):</span>
<span id="cb11-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb11-5">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-6">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._clamp_col(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb11-7"></span>
<span id="cb11-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> down(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>):</span>
<span id="cb11-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb11-10">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-11">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._clamp_col(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _clamp_col(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>):</span>
<span id="cb11-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row]))</span>
<span id="cb11-15"></span>
<span id="cb11-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb11-17"></span>
<span id="cb11-18">        k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stdscr.getkey()</span>
<span id="cb11-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>:</span>
<span id="cb11-20">            sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_UP"</span>:</span>
<span id="cb11-22">            cursor.up(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb11-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb11-24"></span>
<span id="cb11-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p><em>Problem 8.</em> This works alright, but it‚Äôs not the most convenient. Often when you move to a shorter line and back to the original line, you mean for the cursor to be as it was before you moved at all. Implement this functionality.</p>
<p><em>Solution.</em> We can achieve this by introducing a new variable, <code>_col_hint</code>, that keeps track of the last <code>col</code> explicitly moved to, and instead use that to reset the column after line movements.</p>
<p>Whenever <code>col</code> is set by a horizontal movement, it should also update <code>_col_hint</code> to the same value. That value should be used when clamping. We can use a property and property setter to implement that.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Cursor:</span>
<span id="cb12-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, col_hint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb12-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row</span>
<span id="cb12-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col</span>
<span id="cb12-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._col_hint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col_hint <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> col_hint</span>
<span id="cb12-8"></span>
<span id="cb12-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb12-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> col(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._col</span>
<span id="cb12-12"></span>
<span id="cb12-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@col.setter</span></span>
<span id="cb12-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> col(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, col):</span>
<span id="cb12-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col</span>
<span id="cb12-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._col_hint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col</span>
<span id="cb12-17"></span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb12-19"></span>
<span id="cb12-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _clamp_col(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>):</span>
<span id="cb12-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._col_hint, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row]))</span>
<span id="cb12-22"></span>
<span id="cb12-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>Note that <code>_clamp_col</code> sets the internal variable <code>_col</code> directly, avoiding the setter thus not resetting <code>_col_hint</code>.</p>
<p><em>Problem 9.</em> There‚Äôs one final addition that should also improve the user experience. If the cursor is moved horizontally outside the buffer, wrap to the start (or end) of the next (or previous) line.</p>
<p><em>Solution.</em></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... class Cursor:</span></span>
<span id="cb13-2"></span>
<span id="cb13-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> left(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>):</span>
<span id="cb13-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb13-5">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb13-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-8">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row])</span>
<span id="cb13-9"></span>
<span id="cb13-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> right(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>):</span>
<span id="cb13-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row]):</span>
<span id="cb13-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb13-14">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-15">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-16"></span>
<span id="cb13-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb13-18"></span>
<span id="cb13-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_LEFT"</span>:</span>
<span id="cb13-20">            cursor.left(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb13-21"></span>
<span id="cb13-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>Give it a spin. All should work well except when the cursor moves outside of the window.</p>
</section>
<section id="scroll-the-window-to-the-cursor" class="level2">
<h2 class="anchored" data-anchor-id="scroll-the-window-to-the-cursor">Scroll the window to the cursor</h2>
<p><em>Problem 10.</em> We currently have no way of seeing any part of the buffer that‚Äôs outside the window. Worse still, we can also move the cursor outside of the window! Scroll the window vertically as the cursor moves. Don‚Äôt worry about horizontal scrolling for now.</p>
<p><em>Solution.</em> Add <code>row</code> and <code>col</code> attributes to the <code>Window</code> that track the current position of the window as it scrolls through the buffer (specifically, the position of the top-left of the window). Then add methods to scroll the window vertically.</p>
<p>Having learned from cursor movement, we‚Äôll be sure to do the necessary checks the first time round: only scroll up if we‚Äôre not already at the top of the buffer and if the cursor exceeds the top of the window, and similarly for downward scrolling. In the main loop, scroll the window after moving the cursor. And finally, update where we start slicing the buffer when rendering.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Window:</span>
<span id="cb14-4"></span>
<span id="cb14-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_rows, n_cols, row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb14-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_rows</span>
<span id="cb14-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_cols</span>
<span id="cb14-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row</span>
<span id="cb14-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col</span>
<span id="cb14-10"></span>
<span id="cb14-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb14-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> bottom(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb14-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-14"></span>
<span id="cb14-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> up(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, cursor):</span>
<span id="cb14-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cursor.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb14-17">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-18"></span>
<span id="cb14-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> down(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor):</span>
<span id="cb14-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cursor.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb14-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-22"></span>
<span id="cb14-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb14-24"></span>
<span id="cb14-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb14-26">        stdscr.erase()</span>
<span id="cb14-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[window.row:window.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> window.n_rows]):</span>
<span id="cb14-28">            stdscr.addstr(row, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, line)</span>
<span id="cb14-29">        stdscr.move(cursor.row, cursor.col)</span>
<span id="cb14-30"></span>
<span id="cb14-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb14-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_UP"</span>:</span>
<span id="cb14-33">            cursor.up()</span>
<span id="cb14-34">            window.up(cursor)</span>
<span id="cb14-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_DOWN"</span>:</span>
<span id="cb14-36">            cursor.down(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb14-37">            window.down(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor)</span>
<span id="cb14-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_LEFT"</span>:</span>
<span id="cb14-39">            cursor.left()</span>
<span id="cb14-40">            window.up(cursor)</span>
<span id="cb14-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_RIGHT"</span>:</span>
<span id="cb14-42">            cursor.right(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb14-43">            window.down(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor)</span>
<span id="cb14-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>Note that left and right movement may require vertical scrolling since the cursor may be wrapped to the previous or next line.</p>
<p>The last crucial piece is to translate the cursor‚Äôs actual position, which is in terms of the buffer, to be in terms of what‚Äôs displayed: the window. Add a <code>translate</code> method to the window, and use it to render the cursor:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... class Window:</span></span>
<span id="cb15-2"></span>
<span id="cb15-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> translate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, cursor):</span>
<span id="cb15-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cursor.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row, cursor.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col</span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb15-7"></span>
<span id="cb15-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb15-9">        stdscr.erase()</span>
<span id="cb15-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[window.row:window.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> window.n_rows]):</span>
<span id="cb15-11">            stdscr.addstr(row, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, line)</span>
<span id="cb15-12">        stdscr.move(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>window.translate(cursor))</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p><em>Problem 11.</em> We‚Äôve addressed vertical scrolling, but long lines still present an issue. There are two ways we might address long lines. We could either scroll the entire window with the cursor, as we did for vertical scrolling. This is how most editors work. Or we could scroll only the selected line to follow the cursor, which as far as I know is only implemented by <a href="https://www.nano-editor.org/">nano</a>. Let‚Äôs implement the second approach.</p>
<p>The desired behaviour is that when the cursor exceeds some margin away from the right edge of the window, the window should be moved one page to the right, and similarly for the left side.</p>
<p><em>Solution.</em> Add a <code>horizontal_scroll</code> method to <code>Window</code> that implements this, and call it after any cursor movements in the main loop.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... class Window:</span></span>
<span id="cb16-2"></span>
<span id="cb16-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> horizontal_scroll(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, cursor, left_margin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, right_margin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb16-4">        n_pages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cursor.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> right_margin)</span>
<span id="cb16-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(n_pages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> right_margin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> left_margin, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb16-8"></span>
<span id="cb16-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_UP"</span>:</span>
<span id="cb16-10">            cursor.up()</span>
<span id="cb16-11">            window.up(cursor)</span>
<span id="cb16-12">            window.horizontal_scroll(cursor)</span>
<span id="cb16-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_DOWN"</span>:</span>
<span id="cb16-14">            cursor.down(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb16-15">            window.down(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor)</span>
<span id="cb16-16">            window.horizontal_scroll(cursor)</span>
<span id="cb16-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_LEFT"</span>:</span>
<span id="cb16-18">            cursor.left()</span>
<span id="cb16-19">            window.up(cursor)</span>
<span id="cb16-20">            window.horizontal_scroll(cursor)</span>
<span id="cb16-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_RIGHT"</span>:</span>
<span id="cb16-22">            cursor.right(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb16-23">            window.down(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor)</span>
<span id="cb16-24">            window.horizontal_scroll(cursor)</span>
<span id="cb16-25"></span>
<span id="cb16-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>Next, update how the buffer renders long lines by including characters that indicate that a given line has more content on the left (<code>¬´</code>) or right (<code>¬ª</code>).</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb17-2"></span>
<span id="cb17-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb17-4">        stdscr.erase()</span>
<span id="cb17-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[window.row:window.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> window.n_rows]):</span>
<span id="cb17-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> cursor.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> window.row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> window.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-7">                line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"¬´"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> line[window.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb17-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(line) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> window.n_cols:</span>
<span id="cb17-9">                line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line[:window.n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"¬ª"</span></span>
<span id="cb17-10">            stdscr.addstr(row, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, line)</span>
<span id="cb17-11">        stdscr.move(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>window.translate(cursor))</span>
<span id="cb17-12"></span>
<span id="cb17-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
</section>
<section id="edit-the-buffer" class="level2">
<h2 class="anchored" data-anchor-id="edit-the-buffer">Edit the buffer</h2>
<p>And now to the key ingredient, actually editing text!</p>
<p>Start by adding a <code>Buffer</code> class that wraps the list of lines. Implement <code>__len__</code> and <code>__getitem__</code> so that any dependents of <code>buffer</code> needn‚Äôt change. Set <code>buffer</code> to a <code>Buffer</code> instance instead of the current list of lines.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Buffer:</span>
<span id="cb18-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, lines):</span>
<span id="cb18-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines</span>
<span id="cb18-6"></span>
<span id="cb18-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb18-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines)</span>
<span id="cb18-9"></span>
<span id="cb18-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb18-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines[index]</span>
<span id="cb18-12"></span>
<span id="cb18-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb18-14"></span>
<span id="cb18-15">    parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> argparse.ArgumentParser()</span>
<span id="cb18-16">    parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filename"</span>)</span>
<span id="cb18-17">    args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse_args()</span>
<span id="cb18-18"></span>
<span id="cb18-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(args.filename) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb18-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Buffer(f.read().splitlines())</span>
<span id="cb18-21"></span>
<span id="cb18-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>Now‚Äôs a good time for a tiny refactor: extract <code>len(buffer) - 1</code> to the <code>Buffer.bottom</code> property. You might argue that this isn‚Äôt worth being extracted. My reasoning is that the last column in a line is <code>len(buffer[row])</code> whereas the last row in a buffer is <code>len(buffer) - 1</code>, and I can never get it right the first time!</p>
<p>I think it‚Äôs good to be aware of the kinds of bugs you tend to introduce, rather than to always follow a dogmatic approach. It also has a nice symmetry with <code>Window.bottom</code>, though that‚Äôs less important. It might be worth considering doing similar for <code>len(buffer[row])</code>, but I find that easy to remember and already concise.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... class Buffer:</span></span>
<span id="cb19-2"></span>
<span id="cb19-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb19-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> bottom(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb19-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... class Cursor:</span></span>
<span id="cb19-8"></span>
<span id="cb19-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> down(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>):</span>
<span id="cb19-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>.bottom:</span>
<span id="cb19-11">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._clamp_col(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb19-13"></span>
<span id="cb19-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb19-15"></span>
<span id="cb19-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> right(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>):</span>
<span id="cb19-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row]):</span>
<span id="cb19-18">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>.bottom:</span>
<span id="cb19-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb19-22"></span>
<span id="cb19-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... class Window:</span></span>
<span id="cb19-24"></span>
<span id="cb19-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> down(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor):</span>
<span id="cb19-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cursor.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>.bottom:</span>
<span id="cb19-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-28"></span>
<span id="cb19-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>We‚Äôll be adding three methods to the buffer: <code>insert</code>, <code>split</code>, and <code>delete</code>.</p>
<section id="insert-a-string-into-the-buffer" class="level3">
<h3 class="anchored" data-anchor-id="insert-a-string-into-the-buffer">Insert a string into the buffer</h3>
<p><em>Problem 12.</em> If an unmapped key is pressed, insert it into the buffer at the current cursor position.</p>
<p><em>Solution.</em></p>
<p>Since the buffer stores text as a list of lines, and the cursor moves through a two-dimensional space, there‚Äôs a tiny bit of work we need to do to insert text at a given cursor.</p>
<p>Pop the line under the cursor, split it at the cursor, and concatenate the before part, the string to be inserted, and the after part. Insert the concatenated string into the buffer at the cursor. And as usual, call the method in the main loop. This case differs slightly from previous, in that we‚Äôll map all unmapped keys to <code>Buffer.insert</code>. That‚Äôs probably not ideal, for example, a user might enter <code>Ctrl-i</code> which will write <code>^I</code> to the buffer, but it‚Äôll do for now.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... class Buffer:</span></span>
<span id="cb20-2"></span>
<span id="cb20-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, cursor, string):</span>
<span id="cb20-4">        row, col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cursor.row, cursor.col</span>
<span id="cb20-5">        current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines.pop(row)</span>
<span id="cb20-6">        new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current[:col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> current[col:]</span>
<span id="cb20-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines.insert(row, new)</span>
<span id="cb20-8"></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb20-10"></span>
<span id="cb20-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>:</span>
<span id="cb20-12">        sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb20-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb20-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>.insert(cursor, k)</span>
<span id="cb20-16"></span>
<span id="cb20-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>Test it out. It‚Äôll insert text, but won‚Äôt move the cursor after the inserted text. All we need to do is move right for each inserted character. Since we already have a command to move the cursor right (and scroll the window as needed), now‚Äôs the time to extract a <code>right</code> function and re-use it:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> right(window, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor):</span>
<span id="cb21-4">    cursor.right(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb21-5">    window.down(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor)</span>
<span id="cb21-6">    window.horizontal_scroll(cursor)</span>
<span id="cb21-7"></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb21-9"></span>
<span id="cb21-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_RIGHT"</span>:</span>
<span id="cb21-11">        right(window, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor)</span>
<span id="cb21-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb21-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb21-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>.insert(cursor, k)</span>
<span id="cb21-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> k:</span>
<span id="cb21-16">            right(window, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor)</span>
<span id="cb21-17"></span>
<span id="cb21-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
</section>
<section id="split-a-line-in-the-buffer" class="level3">
<h3 class="anchored" data-anchor-id="split-a-line-in-the-buffer">Split a line in the buffer</h3>
<p><em>Probem 12.</em> If you hit enter, you won‚Äôt get the expected result, which is to split the line at the cursor.</p>
<p><em>Solution.</em> Implement <code>split</code> as below, similar to <code>insert</code>.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... class Buffer:</span></span>
<span id="cb22-2"></span>
<span id="cb22-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> split(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, cursor):</span>
<span id="cb22-4">        row, col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cursor.row, cursor.col</span>
<span id="cb22-5">        current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines.pop(row)</span>
<span id="cb22-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines.insert(row, current[:col])</span>
<span id="cb22-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines.insert(row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, current[col:])</span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb22-10"></span>
<span id="cb22-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>:</span>
<span id="cb22-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>.split(cursor)</span>
<span id="cb22-13">        right(window, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor)</span>
<span id="cb22-14"></span>
<span id="cb22-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
</section>
<section id="delete-a-character-from-the-buffer" class="level3">
<h3 class="anchored" data-anchor-id="delete-a-character-from-the-buffer">Delete a character from the buffer</h3>
<p><em>Problem 13.</em> As in the previous section, hitting delete or backspace won‚Äôt give the expected result. Start by implementing a delete command, bound to the delete key, that deletes the character under the cursor.</p>
<p><em>Solution.</em> Add a <code>delete</code> method. If the cursor is at the last position in the buffer, don‚Äôt do anything. Otherwise, there are two options. Either the cursor is inside a line, then follow similar logic to <code>insert</code> but instead of adding a string remove a character. Or the cursor is at the end of the line, then join the current line to the next.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... class Buffer:</span></span>
<span id="cb23-2"></span>
<span id="cb23-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> delete(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, cursor):</span>
<span id="cb23-4">        row, col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cursor.row, cursor.col</span>
<span id="cb23-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (row, col) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bottom, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>[row])):</span>
<span id="cb23-6">            current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines.pop(row)</span>
<span id="cb23-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>[row]):</span>
<span id="cb23-8">                new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current[:col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> current[col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb23-9">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines.insert(row, new)</span>
<span id="cb23-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb23-11">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines.pop(row)</span>
<span id="cb23-12">                new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb23-13">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines.insert(row, new)</span>
<span id="cb23-14"></span>
<span id="cb23-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb23-16"></span>
<span id="cb23-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_DELETE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x04</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>):</span>
<span id="cb23-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>.delete(cursor)</span>
<span id="cb23-19"></span>
<span id="cb23-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>On MacOS, curses doesn‚Äôt correctly decode the backspace and delete keys, they‚Äôre instead returned as <code>\x7f</code> and <code>\x04</code> respectively. I haven‚Äôt found a satisfactory answer for why this is the case. If you know, I‚Äôd love to hear!</p>
<p><em>Problem 14.</em> Implement backspace.</p>
<p><em>Solution.</em> Backspace can be implemented by moving left and then deleting. Just as we extracted a <code>right</code> function for insertion, we‚Äôll extract a <code>left</code> function here:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> left(window, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor):</span>
<span id="cb24-4">    cursor.left(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb24-5">    window.up(cursor)</span>
<span id="cb24-6">    window.horizontal_scroll(cursor)</span>
<span id="cb24-7"></span>
<span id="cb24-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... def main(stdscr):</span></span>
<span id="cb24-9"></span>
<span id="cb24-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KEY_BACKSPACE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x7f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>):</span>
<span id="cb24-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (cursor.row, cursor.col) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb24-12">            left(window, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, cursor)</span>
<span id="cb24-13">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>.delete(cursor)</span>
<span id="cb24-14"></span>
<span id="cb24-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>And look at that! You‚Äôve built a minimal yet functional text editor.</p>
<p><em>Problem 15.</em> There‚Äôs one key piece of functionality still missing: saving the edited file. I‚Äôll leave that as the final unsolved problem.</p>
</section>
</section>
<section id="what-next" class="level2">
<h2 class="anchored" data-anchor-id="what-next">What next?</h2>
<p>I hope you enjoyed working through this, and that you learned something new. If you did or if you have any other questions or comments, feel free to reach out to me on <a href="https://twitter.com/wasimlorgat">twitter</a> or via <a href="mailto:mwlorgat@gmail.com">email</a>.</p>
<p>If this whet your appetite and you‚Äôre looking for more, here are some exercises you might find interesting, in roughly increasing difficulty:</p>
<ol type="1">
<li>Remap cursor movement to <code>Ctrl-p</code> (up), <code>Ctrl-n</code> (down), <code>Ctrl-b</code> (left), and <code>Ctrl-f</code> (right).</li>
<li>Add page up and page down commands.</li>
<li>Add a command to save the buffer to a file.</li>
<li>Rewrite horizontal scrolling to move the entire window rather than only the current line.</li>
<li>Add a status line to the bottom of the window that displays the name of the file being edited and the current cursor position.</li>
<li>Add commands to move one word left or right.</li>
<li>If the buffer is modified and not yet saved, print a message in the status line and don‚Äôt let the user exit. Add a force exit command as well.</li>
<li>Rewrite the application so that there‚Äôs no mutable state. I‚Äôve found <a href="https://docs.python.org/3/library/dataclasses.html">dataclasses</a> with the <code>dataclass.replace</code> function a convenient way to write applications around immutable objects.</li>
</ol>
</section>
<section id="credits" class="level2">
<h2 class="anchored" data-anchor-id="credits">Credits</h2>
<p>Many thanks to the following people and projects for sharing their great work, upon which a lot of this was based!</p>
<ul>
<li>Many thanks to Pavel Spirhanzl and Alexandre Pajak for their keen eyes in identifying bugs in early versions.</li>
<li>Gary Bernhardt‚Äôs <a href="https://www.destroyallsoftware.com/screencasts/catalog/text-editor-from-scratch">Text Editor From Scratch</a> screencast.</li>
<li>Anthony Sottile‚Äôs <a href="https://github.com/asottile/babi/">babi</a>.</li>
<li><a href="https://git.savannah.gnu.org/cgit/nano.git/tree/">nano</a> source.</li>
<li><a href="https://www.gnu.org/software/emacs/">Emacs</a> source. In my opinion, the best way to explore the source is through Emacs‚Äô built-in help commands.</li>
</ul>


</section>

 ]]></description>
  <category>tutorial</category>
  <guid>https://wasimlorgat.com/posts/editor.html</guid>
  <pubDate>Wed, 30 Dec 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Tools wishlist</title>
  <link>https://wasimlorgat.com/posts/tools-wishlist.html</link>
  <description><![CDATA[ 




<p>I care a lot about the tools I use. You can see this by looking at how much time I‚Äôve spent on <a href="https://github.com/seem/dotfiles">my dotfiles</a>.<sup>1</sup> It‚Äôs not about being more ‚Äúproductive‚Äù. It‚Äôs about how it <em>feels</em> to use them. I just can‚Äôt help myself but tinker until it feels right.</p>
<p>I also try my best to understand more generally what it is I‚Äôm getting from each tool in my toolbox. That gives me good grounds to cut through the hype when new tools come along. To that end, here is a list of requirements I currently hold for the tools I use (kind of) in decreasing order of importance:</p>
<ol type="1">
<li><p><strong>Data ownership and privacy.</strong> I must own my data. No one else must be able to touch my data without my express permission. Promises, unfortunately, aren‚Äôt good enough. I find it incredibly sad that this item rules out many otherwise amazing tools out there.</p></li>
<li><p><strong>Speed.</strong> There should be minimal lag between action and outcome. The application should never hang unless for a very obviously long-running process. Even then, input and output shouldn‚Äôt freeze.</p></li>
<li><p><strong>Fuzzy finding.</strong> Choosing from a set of commands should always be through an interface that allows me to incrementally narrow the set via fuzzy search. Fuzzy, at the very least, meaning that letters can be left out.</p>
<p>Ideally, there‚Äôd be fuzzy finding all the way down to auto-completing single keywords. Though, weirdly enough, I‚Äôve still not found an auto-completion system that satisfies my speed requirement. They all seem to introduce a sub-second input lag that grinds my gears. PyCharm does a great job, but doesn‚Äôt satisfy my other requirements.</p>
<p>This is sort of a special case of a more general principle that if there‚Äôs a repeated action that the computer could guess with very high accuracy, it should do the work for me. For actions that I perform exceedingly often, I‚Äôd bind them to a simple keyboard shortcut. I like VIM‚Äôs modal editing because it gives me far more keys to bind.</p></li>
<li><p><strong>No visual clutter.</strong> There must be an option to disable menu bars, tool bars, icons. Because I prefer keyboard-driven and I have fuzzy finding, I often don‚Äôt really need menus/toolbars. In cases where information lends itself well to a visual representation, I prefer it to appear as needed, or if persistent, for it to be compact. For example, a bar displaying open tabs could be a single line of text.</p></li>
<li><p><strong>Keyboard-driven.</strong> I‚Äôm not against the mouse at all. I very happily use it all the time. But between emails, Slack messages, documentation, issue descriptions, code reviews, and good ol‚Äô programming, my work involves tons of writing. And when I‚Äôm writing, if there‚Äôs even a single action that requires changing my hand position every few minutes, it becomes frustrating really quickly.</p>
<p>Some of the applications I use aren‚Äôt fully keyboard-driven. I don‚Äôt really mind that when the primary mode of use isn‚Äôt typing. For example, creating presentations, managing tasks (I use <a href="https://culturedcode.com/things/">Things</a>), calendars, Slack and Twitter where I‚Äôm reading at least as much as I‚Äôm writing, and browsing the web.</p>
<p>Ideally, I should also be able to reconfigure keyboard shortcuts arbitrarily, and for any action. Unfortunately many modern applications fall short here, but there are typically workarounds.</p>
<p>This is a special case of keeping similar actions that occur in similar contexts ‚Äúclose‚Äù. If the context is that I‚Äôm already typing a bunch, actions should be a keyboard shortcut or fuzzy find away. If the context requires pointing and clicking, then mouse shortcuts, toolbars, and maybe even <a href="https://en.wikipedia.org/wiki/Pie_menu">pie menus</a> are better. For this reason, I‚Äôm also not really a fan of keyboard-driven tiling window managers.</p></li>
<li><p><strong>Themes.</strong> I‚Äôm red-green colour-blind, and not all default colour schemes account for this. I‚Äôm also a picky about my colour schemes, fonts, and overall theme. I also like switching them up every now and then. Most tools allow this these days.</p></li>
</ol>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Caution: They‚Äôre not always up-to-date, or easy to understand, and I‚Äôve made no effort to ensure they work for anyone else.‚Ü©Ô∏é</p></li>
</ol>
</section></div> ]]></description>
  <category>musing</category>
  <guid>https://wasimlorgat.com/posts/tools-wishlist.html</guid>
  <pubDate>Mon, 10 Aug 2020 15:10:00 GMT</pubDate>
</item>
<item>
  <title>Doing important work</title>
  <link>https://wasimlorgat.com/posts/doing-important-work.html</link>
  <description><![CDATA[ 




<p>I‚Äôve been thinking a lot about what it means to Do Important Work, and there two quotes in particular that have stuck with me.</p>
<p>The first is from Visa‚Äôs <a href="http://www.visakanv.com/blog/prestige/"><em>The Prestige Trap</em></a>. With his classic wit and charm, Visa breaks the problem down in the opening sentence:</p>
<blockquote class="blockquote">
<p>I‚Äôve had several conversations with friends who‚Äôve been incapacitated by the burdensome bullshit obligation to Have A Meaningful Life / Be Remembered / Do Important Work.</p>
</blockquote>
<p>And though the details differ, the second is <a href="https://twitter.com/michael_nielsen/status/1232789239584059392?s=20">a tweet from Michael Nielsen</a> that I think is closely related:</p>
<blockquote class="blockquote">
<p>I try particularly to push back on the efficiency mindset with work (where it‚Äôs strongest). Asking ‚ÄúWhat‚Äôs a much more enjoyable way‚Äù to achieve some outcome (even if inefficient) has been very good for me. Amusingly, though not the point, it often makes the work much better too</p>
</blockquote>
<p>I think they‚Äôre very much speaking about the same thing. Many of us want to Do Important Work, including, in my opinion, Michael and Visa. That‚Äôs fine. A natural follow-up is to try to make it concrete with a question: What important work can I do?</p>
<p>But here‚Äôs the problem. Measuring the importance or meaning of an action is <em>really hard</em>. I‚Äôm not sure it‚Äôs even possible. From a pragmatic perspective, we might say that important work is recognised through reward, perhaps monetary. But, as Visa reminds us, ‚Äònobody really knows what the world needs! The world itself doesn‚Äôt quite know either, often until on hindsight!‚Äô.</p>
<p>So what do we do instead? Well, what seems to have worked empirically is to ‚Äòenjoy the piddling‚Äô. To be playful and curious. To prefer the more enjoyable way. Feynman, Jobs, Wozniak, and Newton are all examples cited by Visa. It‚Äôs okay to want to Do Important Work. I think both Michael and Visakan really do want that. And I know I do. The trick is to rejig the way that you think about it away from the destructive default to a more constructive, and amusingly efficient alternative. I‚Äôm delighted by the similarity between Visa‚Äôs and Michael‚Äôs descriptions:</p>
<blockquote class="blockquote">
<p>Visa: Wonderfully, it seems to me that lots of people who end up Doing Important Work often got there by being playful and curious.</p>
</blockquote>
<blockquote class="blockquote">
<p>Michael: Amusingly, though not the point, it often makes the work much better too.</p>
</blockquote>
<p>It really is both wonderful and amusing. It feels like the gist of a koan: to Do Important Work, you must forget about Doing Important Work.</p>



 ]]></description>
  <category>blog</category>
  <guid>https://wasimlorgat.com/posts/doing-important-work.html</guid>
  <pubDate>Sun, 02 Aug 2020 17:48:09 GMT</pubDate>
</item>
<item>
  <title>Hats and productivity</title>
  <link>https://wasimlorgat.com/posts/hats.html</link>
  <description><![CDATA[ 




<p>Sometimes I feel like pursuing depth. Scribbling through a difficult problem. Other times it‚Äôs about breadth. Searching for existing solutions to my problem. Sometimes it‚Äôs about people. Connecting with others, seeing what they‚Äôre working on, what they‚Äôre thinking about, and how we might help each other. Sometimes it‚Äôs about planning, or otherwise separating coulds from shoulds.</p>
<p>All of these require a different hat, a different set of skills and tools, and there‚Äôs a cost to switching. But more subtle than that, there‚Äôs a cost to wearing the wrong hat at the wrong time. I understand that it‚Äôs unrealistic to expect absolute freedom here. In fact, I‚Äôm not sure that‚Äôs ideal. Too much freedom is itself a source of pressure. A vacuum. But somewhere in the middle, where there‚Äôs just enough pressure to push you forward, together with just enough room to wear the right hat, there‚Äôs a sweet spot.</p>
<p>You might be wondering how anything would get done if we decided what work to do on a whim. I think this is one of the defining factors of a great team. A team with diversity in strengths, weaknesses, backgrounds, and more generally, modes of thought, is like a <a href="https://en.wikipedia.org/wiki/Polyphase_system">polyphase system</a>. It provides constant power transfer, despite its individual conductors peaking at different points in time, ultimately delivering more power than single-phase systems for the same voltage.</p>



 ]]></description>
  <category>musing</category>
  <guid>https://wasimlorgat.com/posts/hats.html</guid>
  <pubDate>Sun, 26 Jul 2020 18:37:00 GMT</pubDate>
</item>
<item>
  <title>Include derivations</title>
  <link>https://wasimlorgat.com/posts/derivations.html</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Include derivations! It‚Äôs perfectly fine to use clever techniques and definitions, such as <code>rleDecode = (uncurry replicate =&lt;&lt;)</code> for decoding run-length encoded lists of tuples, but in the comments, include the original giant definition which you progressively refined into a short diamond! Even better, add a test (like a QuickCheck property) where you demonstrate that the output from the two are the same. If you are optimizing, somewhere hold onto the slow ones which you know are correct. Derivations are brilliant documentation of your intent, they provide numerous alternate implementations which might work if the current one breaks, and they give the future Haskellers a view of how you were thinking.</p>
<p>‚Äî Gwern, <cite><a href="https://www.gwern.net/Resilient-Haskell-Software">Resilient Haskell Software</a></cite></p>
</blockquote>
<p>Include derivations! An idea I hadn‚Äôt seen before. In fact, an idea <em>counter to</em> what I‚Äôve seen. It got me thinking about comments and documentation.</p>
<section id="prefer-self-documenting-code-over-comments" class="level2">
<h2 class="anchored" data-anchor-id="prefer-self-documenting-code-over-comments">Prefer self-documenting code over comments</h2>
<p>I‚Äôm sure you‚Äôve heard this advice before. I‚Äôve heard it and even given it many times.</p>
<p>The argument goes something like this: comments tend to become out of sync with the code they‚Äôre commenting. While your code is tested by its users and by your test suite, there‚Äôs nothing to ensure that comments remain correct.<sup>1</sup> It seems natural then that without any sticking force your comments become outdated.</p>
<p>Yet I still find myself smiling when I come across well-commented code. Why the discrepency?</p>
</section>
<section id="developer--vs-user-oriented-comments" class="level2">
<h2 class="anchored" data-anchor-id="developer--vs-user-oriented-comments">Developer- vs user-oriented comments</h2>
<p>Any given program has at least two groups of people interacting with it: developers, who directly change and extend the underlying functionality; and users, who use that functionality.</p>
<p>Developers and users benefit from different forms of documentation. Users typically don‚Äôt need to know the full extent of implementation details and the context in which decisions were made, instead they need to know the interface of the various components, how those components interact, and how to compose them to achieve a desired goal. Developers, on the other hand, need to know the implementation details in all their glory.</p>
<p>For example, while users probably don‚Äôt need to know <em>why</em> a specific method was chosen to decode run-length encoded lists of tuples, this is absolutely the type of information a developer needs to make good decisions about how to further extend that functionality. In the same way users probably don‚Äôt need to know why the specific method was chosen, developers probably don‚Äôt need the function‚Äôs arguments redescribed to them each time. Self-documenting functions and argument names do just fine. I increasingly see inline comments and docstrings for the purpose of auto-generating user docs as redundant noise <em>while working with the code</em>. Perhaps a topic for a future post. Naturally, comments describing those arguments gradually fade away from our attention, and are left outdated.</p>
<p>I view developer-oriented comments as distinctly different from user-oriented comments. Someone from the past is talking directly to me: warning me of a trap, describing a hard-to-find workaround, or lamenting why this ‚Äútemporary hack‚Äù should be temporary. These feel like an extension of the code, thus I consider them less susceptible to becoming outdated.</p>
</section>
<section id="takeaway-everythings-hard-and-there-are-no-easy-answers" class="level2">
<h2 class="anchored" data-anchor-id="takeaway-everythings-hard-and-there-are-no-easy-answers">Takeaway: everything‚Äôs hard and there are no easy answers</h2>
<p>There are (almost) no absolutes. There are <em>guidelines</em>, and they serve you well as you‚Äôre learning the ropes. But as your expertise grows, you learn to see them as the fuzzy boundaries that they are.</p>
<p>It makes sense though. As beginners, we aren‚Äôt primed for the nuance required to understand the reality in all of its complexity. But always remember that guidelines are only approximations and that reality is more complex.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>While there are options like Python‚Äôs <code>doctest</code>, it still doesn‚Äôt apply to prose.‚Ü©Ô∏é</p></li>
</ol>
</section></div> ]]></description>
  <category>software</category>
  <guid>https://wasimlorgat.com/posts/derivations.html</guid>
  <pubDate>Sun, 19 Jul 2020 19:40:00 GMT</pubDate>
</item>
<item>
  <title>Introducing pdlog</title>
  <link>https://wasimlorgat.com/posts/pdlog.html</link>
  <description><![CDATA[ 




<p>Most data problems <a href="https://vickiboykis.com/2017/03/20/should-you-replace-hadoop-with-your-laptop/">don‚Äôt need the horsepower of Spark or Hadoop</a>. If all of your data fits comfortably in memory, pandas may be a great fit. pandas is my goto for quickly building out production pipelines that are both efficient and easy to maintain.</p>
<p>One issue I‚Äôve run into is that pandas doesn‚Äôt natively log. Fortunately, it allows extending the dataframe API with <a href="https://pandas.pydata.org/pandas-docs/stable/development/extending.html#registering-custom-accessors">accessors</a>. We have since implemented an accessor for logging in the publicly avilable <a href="https://github.com/dataprophet/pdlog"><code>pdlog</code></a> package.</p>
<p>To get started:</p>
<ol type="1">
<li><p>Install <code>pdlog</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pdlog</span></code></pre></div></li>
<li><p>Import <code>pdlog</code> in your application:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pdlog</span></code></pre></div></li>
<li><p>Add <code>.log</code> before your method calls:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.log.dropna()</span></code></pre></div>
<p>They‚Äôll now log useful information about the operation, for example:</p>
<pre class="output"><code>2020-05-26 20:55:30,049 INFO &lt;pdlog&gt; dropna: dropped 1 row (17%), 5 rows remaining</code></pre></li>
</ol>
<p>It works by registering a custom <code>LogAccessor</code> under the <code>.log</code> namespace on import. The accessor containes a collection of wrapper methods that log what they‚Äôre doing.</p>



 ]]></description>
  <category>software</category>
  <guid>https://wasimlorgat.com/posts/pdlog.html</guid>
  <pubDate>Fri, 29 May 2020 00:00:00 GMT</pubDate>
  <media:content url="https://wasimlorgat.com/posts/images/pdlog.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Code != idea</title>
  <link>https://wasimlorgat.com/posts/code-neq-idea.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/o8-IuUMG2T8" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p><em>(The original title and description of the talk changed between the pitch and final version, hence the differences.)</em></p>
<p>This is a lightning talk I gave at the satRday 2018 conference. In it, I share an epiphany I had about programming and how it relates to people and our ideas, after programming for most of my life and discovering higher-level languages like Python and R. The talk won best student lightning talk, which included a copy of the beautiful <a href="https://r4ds.hadley.nz/">R for Data Science</a> signed by Hadley Wickham himself!</p>
<p>Fast forward 4 years, and this realisation doesn‚Äôt feel as profound as it once did, but that‚Äôs okay. I believe the world would be a little better if everyone shared their personal learnings and experiences. Please <a href="mailto:mwlorgat@gmail.com">let me know</a> of yours!</p>
<p>Anyway, keep scrolling for a written version of the talk.</p>
<section id="my-journey-from-game-maker-to-python" class="level2">
<h2 class="anchored" data-anchor-id="my-journey-from-game-maker-to-python">My journey from Game Maker to Python <img src="https://wasimlorgat.com/posts/images/code-represents-the-ideas-of-people-1.png" class="img-fluid"></h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/code-represents-the-ideas-of-people-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Good morning everyone, my name is Wasim.</p>
<p>A little background. I started programming when I was in primary school. I‚Äôve always loved games, and making things. Unsurprisingly, my foray into programming started with making games.</p>
<p>After vigorous searching for game making software, with my favourite search engine at the time, AltaVista, which some of you may remember, I found a program called Game Maker.</p>
<p>It had a GUI, where you created game objects and programmed logic into them with buttons. It also had scripting capabilities. But I didn‚Äôt dare to delve into them.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/code-represents-the-ideas-of-people-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Eventually, a cousin of mine introduced me to a more powerful tool. A programming language called DarkBASIC, a form of the language, BASIC.</p>
<p>It had a nice editor, a built-in command line interface. I think the 1 and 2 on the top right corresponded to tabs. And it allowed you to create 3D games.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/code-represents-the-ideas-of-people-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>I then moved on to some of the more ‚Äúreal‚Äù programming languages. I dabbled in C++.</p>
<p>I was taught Java in high school.</p>
<p>And finally, I settled on Python. I think the reason I hopped so often from one language to the next, was because I was never quite satisfied with how it ‚Äúfelt‚Äù to program in these languages. I was never truly comfortable with the way I had to translate what I <em>thought</em> into what I <em>typed</em>. Until Python.</p>
</section>
<section id="the-joy-of-high-level-languages" class="level2">
<h2 class="anchored" data-anchor-id="the-joy-of-high-level-languages">The joy of high-level languages <img src="https://wasimlorgat.com/posts/images/code-represents-the-ideas-of-people-4.png" class="img-fluid"></h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/code-represents-the-ideas-of-people-4.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>With Python, I learned about writing and reading beautiful code. If you haven‚Äôt already seen this poem, <a href="https://peps.python.org/pep-0020/">The Zen of Python</a>, by Tim Peters, you should check it out.</p>
<p>There is an idea called writing ‚ÄúPythonic‚Äù code, which this poem sort of defines. There was something compelling, almost poetic, about reading and writing ‚ÄúPythonic‚Äù code.</p>
<p>As a young programmer, it was the first time I realized the importance of how code <em>looks</em>, not just what it <em>does</em>.</p>
</section>
<section id="this-is-not-a-pipe" class="level2">
<h2 class="anchored" data-anchor-id="this-is-not-a-pipe">This is not a pipe <img src="https://wasimlorgat.com/posts/images/leci-nest-pas-une-pipe.png" class="img-fluid"></h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/leci-nest-pas-une-pipe.png" class="preview-image img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>More recently, I came across an even more interesting idea about how code <em>looks</em>.</p>
<p>Here‚Äôs a painting, by the French artist, Ren√© Magritte, that captures the idea. The text at the bottom translates to ‚ÄúThis is not a pipe.‚Äù</p>
<p>If you haven‚Äôt seen this before, that might be a little confusing.</p>
<p>‚ÄúThat is a pipe. I‚Äôve seen pipes before, and that, my friend, is a pipe.‚Äù</p>
<p>Well, you can‚Äôt pack <em>this</em> with tobacco and smoke it. <em>This</em> is a painting of a pipe, an image, a representation, but its not the pipe itself.</p>
<p>At this point, you might be wondering: What does this have to do with code? And what does this talk have to do with R?</p>
<p>Well, just as <em>this</em> is a representation of a pipe‚Ä¶</p>
</section>
<section id="this-is-not-an-idea" class="level2">
<h2 class="anchored" data-anchor-id="this-is-not-an-idea">This is not an idea <img src="https://wasimlorgat.com/posts/images/code-represents-the-ideas-of-people-7.png" class="img-fluid"></h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/code-represents-the-ideas-of-people-7.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p><em>This</em> is a <em>representation</em> of an <em>idea</em>. The code is <em>not</em> the idea itself.</p>
<p>I believe that when we code (even for experts) we constantly struggle translating between our idea and its representation. If the code is a particularly good representation of our underlying idea, then it flows seamlessly, almost by itself.</p>
<p>On the other hand, if the code is not a good representation of our idea, then this struggle is quite costly.</p>
<p>I wanna show you, by example, why I‚Äôm so fascinated by R. This is some very simple dplyr code.</p>
<p>What I do when I read (or write) code like this, is to translate it to and from English. I don‚Äôt think ‚Äúdf percent greater than percent‚Ä¶‚Äù</p>
</section>
<section id="translating-code-to-idea" class="level2">
<h2 class="anchored" data-anchor-id="translating-code-to-idea">Translating code to idea <img src="https://wasimlorgat.com/posts/images/code-represents-the-ideas-of-people.gif" class="img-fluid"></h2>
<p><img src="https://wasimlorgat.com/posts/images/code-represents-the-ideas-of-people.gif" class="img-fluid"></p>
<p>I might start off by thinking that I want to ‚ÄúTake df‚Äù, in order to do something to it.</p>
<p>I‚Äôd read the pipe symbol <code>%&gt;%</code> as ‚Äúthen‚Äù.</p>
<p>I <em>then</em> want to filter ‚Äúrows of df where‚Äù</p>
<p>Read the symbol as ‚Äúis less than‚Äù</p>
<p>Replace the pipe symbol with ‚Äúthen‚Äù again</p>
<p>I <em>then</em> want to arrange rows of df by‚Ä¶</p>
<p>Same thing with the pipe symbol.</p>
<p>And finally, I want to select the column‚Ä¶</p>
<p>And, very easily, we have an English sentence.</p>
<p>Oh! And if we‚Äôre really fussy, we could add punctuation.</p>
<p>So we‚Äôve translated, very easily and systematically, from dplyr code to English.</p>
<p>Isn‚Äôt that a beautiful representation?</p>
<p>It‚Äôs beautiful because it‚Äôs been so carefully designed, functions have been so carefully named, all keeping in mind one very important principle:</p>
</section>
<section id="code-represents-the-ideas-of-people" class="level2">
<h2 class="anchored" data-anchor-id="code-represents-the-ideas-of-people">Code represents the ideas of people <img src="https://wasimlorgat.com/posts/images/code-represents-the-ideas-of-people-6.png" class="img-fluid"></h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wasimlorgat.com/posts/images/code-represents-the-ideas-of-people-6.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Code represents the ideas of <em>people</em>. By considering the <em>people</em> who will use it, we minimize the cost of translating from obscure machine-friendly commands into beautiful prose.</p>
<p>And by minimizing this cost, it frees our minds to focus on what‚Äôs really important: the ideas themselves.</p>


</section>

 ]]></description>
  <category>talk</category>
  <guid>https://wasimlorgat.com/posts/code-neq-idea.html</guid>
  <pubDate>Sat, 17 Mar 2018 00:00:00 GMT</pubDate>
  <media:content url="https://wasimlorgat.com/posts/images/leci-nest-pas-une-pipe.png" medium="image" type="image/png" height="100" width="144"/>
</item>
</channel>
</rss>
